###############################################################################
#
# IAR C/C++ Compiler V2.10.4.157 for STM8                 15/Nov/2017  10:59:34
# Copyright 2010-2015 IAR Systems AB.
#
#    Source file  =  E:\AirTone\AirToneMLL\BSP\BSP.c
#    Command line =  
#        E:\AirTone\AirToneMLL\BSP\BSP.c -e -Oh --debug --code_model medium
#        --data_model medium -o E:\AirTone\AirToneMLL\Debug\Obj\ --dlib_config
#        "F:\IAR Systems\Embedded Workbench 7.0\stm8\LIB\dlstm8mmn.h" -lcN
#        E:\AirTone\AirToneMLL\Debug\List\ -I E:\AirTone\AirToneMLL\BSP\ -I
#        E:\AirTone\AirToneMLL\USER\ -I E:\AirTone\AirToneMLL\DRIVER\ -I
#        E:\AirTone\AirToneMLL\DRIVER\Memory\ -I
#        E:\AirTone\AirToneMLL\DRIVER\AK4637\ -I
#        E:\AirTone\AirToneMLL\DRIVER\CC8530\ -I
#        E:\AirTone\AirToneMLL\DRIVER\Serial\ -I
#        E:\AirTone\AirToneMLL\DRIVER\OLED\ -I
#        E:\AirTone\AirToneMLL\DRIVER\STM8L152C6\inc\ -I
#        E:\AirTone\AirToneMLL|DRIVER\STM8L152C6\src\ --vregs 16
#    List file    =  E:\AirTone\AirToneMLL\Debug\List\BSP.lst
#    Object file  =  E:\AirTone\AirToneMLL\Debug\Obj\BSP.o
#
###############################################################################

E:\AirTone\AirToneMLL\BSP\BSP.c
      1          /********************************************************************************
      2           * Brief:   Board support package, including STM8L15x function packages and
      3           *          other devices' board-level packages.
      4           * Author:	taotsi
      5           * Update:	2017.04.04
      6           *******************************************************************************/
      7          
      8          /* Includes -------------------------------------------------------------------*/
      9          #include "BSP.h"
     10          
     11          /* Variavles ------------------------------------------------------------------*/
     12          /* Extern Variables*************************************************************/
     13          extern volatile uint8_t UI=1;
     14          
     15          extern uint16_t nAckErr;
     16          extern uint16_t nAck;
     17          
     18          /* Private Variables ***********************************************************/
     19          volatile uint32_t TimingDelay;
     20          
     21          
     22          /* Functions ------------------------------------------------------------------*/
     23          
     24          /* System Initialization and Configuration *************************************/
     25          
     26          void System_Config(void)
     27          {
     28              SCLK_Config();
     29              TIM4_Config();
     30              SPI_Config();
     31              UART_Config(57600);
     32          
     33              OLED_Init();
     34              oInterface_Init();
     35          
     36              M25P_Init();
     37              MemMng_Config();
     38              
     39              KEY_Config();
     40              
     41              Battery_Config();
     42              
     43              CC8530_Init(CC8530_BBH_BL);
     44          
     45              I2C_Config();
     46              /* To make I2C normal, this is necessary. I dont know why though.
     47                   And this code must be exactly here. It wont work if it is called
     48                   by other functions. shit, this is strange. Just let it be.      */
     49              //I2Csim_DummyPre();
     50              
     51              AK4637_Init();
     52              AK4637_SignalPath(DAC_No_DigitalBlock);
     53              
     54              oPrint(">System Inited");
     55          }
     56          /*
     57          PRIORITY:
     58          SCLK before all;
     59          SPI before OLED;
     60          SPI before 8530;
     61          SPI before M25P;
     62          I2C before 4637;
     63          TIM4 before OLED;
     64          OLED before oInterface;
     65          M25P before MemMng;
     66          oInterface before all non-stm8l drivers;
     67          */
     68          
     69          void SCLK_Config(void)
     70          {
     71              CLK_DeInit();
     72              CLK_SYSCLKDivConfig(CLK_SYSCLKDiv_1);
     73          
     74              CLK_PeripheralClockConfig(CLK_Peripheral_TIM4, ENABLE);
     75          }
     76          
     77          void TIM4_Config(void)
     78          {
     79              disableInterrupts();
     80          
     81              //16MHz/128=125KHz, PERIOD=124, (124+1)/125KHz=1ms
     82              TIM4_TimeBaseInit(TIM4_Prescaler_128, TIM4_PERIOD);
     83              TIM4_ClearFlag(TIM4_FLAG_Update); // clear update flag
     84              TIM4_ITConfig(TIM4_IT_Update, ENABLE);// denable update interrupt
     85              TIM4_Cmd(ENABLE);
     86          
     87              enableInterrupts();
     88          }
     89          
     90          void KEY_Config(void)
     91          {
     92              disableInterrupts();
     93          
     94              GPIO_Init(PORT_KEY, KEY_Back|KEY_Down|KEY_Enter|KEY_Up|
     95                        KEY_1|KEY_2, GPIO_Mode_In_PU_IT);
     96          
     97              EXTI_DeInit();
     98              EXTI_SelectPort(EXTI_Port_E);
     99              EXTI_SetPinSensitivity(EXTI_Pin_0,EXTI_Trigger_Falling);
    100              EXTI_SetPinSensitivity(EXTI_Pin_1,EXTI_Trigger_Falling);
    101              EXTI_SetPinSensitivity(EXTI_Pin_2,EXTI_Trigger_Falling);
    102              EXTI_SetPinSensitivity(EXTI_Pin_3,EXTI_Trigger_Falling);
    103              EXTI_SetPinSensitivity(EXTI_Pin_4,EXTI_Trigger_Falling);
    104              EXTI_SetPinSensitivity(EXTI_Pin_5,EXTI_Trigger_Falling);
    105              //EXTI_SetPinSensitivity(EXTI_Pin_6,EXTI_Trigger_Falling);
    106          
    107              enableInterrupts();
    108          }
    109          
    110          
    111          /* Battery Monitor *************************************************************/
    112          
    113          /**
    114            * Brief:  Initialize the related ADC.
    115            */
    116          void Battery_Config(void)
    117          {
    118              CLK_PeripheralClockConfig(CLK_Peripheral_ADC1 , ENABLE);
    119              GPIO_Init(GPIOA, GPIO_Pin_6, GPIO_Mode_In_FL_No_IT); // Battery voltage monitoring
    120              ADC_Init(ADC1, ADC_ConversionMode_Single,
    121                       ADC_Resolution_12Bit,  ADC_Prescaler_2);
    122              ADC_ChannelCmd(ADC1, ADC_Channel_0, ENABLE);
    123              ADC_Cmd(ADC1, ENABLE);
    124          }
    125          
    126          
    127          /**
    128            * Brief:  Get the ADC value from battery.
    129            * Note:   The actual voltage the ADC gets is 2/3 of the battery output voltage.
    130            *           Or rather, the battery voltage is divided by a 20k and a 10k resistor.
    131            * Note:   The returned value is not converted into real voltage.
    132            *           This will be done later.
    133            * Param:  nSample:  How many times ADC will sample.
    134            * RetVal: Average value of several samples.
    135            */
    136          uint16_t Battery_GetVoltage(uint16_t nSample)
    137          {
    138              uint16_t DataSum = 0;
    139              uint16_t DataAvr = 0;
    140              for(uint16_t i=0; i<nSample; i++)
    141              {
    142                  ADC_SoftwareStartConv(ADC1);
    143                  while(ADC_GetFlagStatus(ADC1 , ADC_FLAG_EOC) == RESET);
    144                  ADC_ClearFlag(ADC1 , ADC_FLAG_EOC);
    145                  DataSum += ADC_GetConversionValue(ADC1);
    146              }
    147              DataAvr = DataSum / nSample;
    148              return DataAvr;
    149          }
    150          
    151          
    152          /* SPI Operation ***************************************************************/
    153          
    154          /**
    155            * Brief:  SPI bus and other related controling line configuration
    156            */
    157          void SPI_Config(void)
    158          {
    159          #if SPITYPE == SPI_sim
    160              SPIsim_Init();
    161          #else // If SPI type is in-chip.
    162              CLK_PeripheralClockConfig(CLK_Peripheral_SPI1, ENABLE);
    163          
    164              GPIO_Init(PORT_SPIBUS, PIN_SPI_SCLK, GPIO_Mode_In_PU_No_IT);
    165              GPIO_Init(PORT_SPIBUS, PIN_SPI_MOSI, GPIO_Mode_In_PU_No_IT);
    166              GPIO_Init(PORT_SPIBUS, PIN_SPI_MISO, GPIO_Mode_In_PU_No_IT);
    167          
    168              SPI_Init(SPI1, SPI_FirstBit_MSB, SPI_BaudRatePrescaler_2, SPI_Mode_Master,
    169                       SPI_CPOL_Low, SPI_CPHA_1Edge, SPI_Direction_2Lines_FullDuplex,
    170                       SPI_NSS_Soft, 0x07);
    171              /* Note: 3 slaves happen to share the same relationship between CPOL and CPHA. */
    172          
    173              GPIO_Init(PORT_STM8_8530, PIN_SPI_8530_CSN, GPIO_Mode_Out_PP_High_Fast);
    174              //GPIO_Init(PORT_SPIBUS, PIN_SPI_8530_CSN, GPIO_Mode_In_FL_No_IT);
    175              GPIO_Init(PORT_STM8_OLED, PIN_SPI_OLED_CSN, GPIO_Mode_Out_PP_High_Fast);
    176              GPIO_Init(PORT_STM8_M25P, PIN_SPI_M25P_CSN, GPIO_Mode_Out_PP_High_Fast);
    177          #endif
    178          
    179              /* OLED controling line */
    180              GPIO_Init(PORT_STM8_OLED, PIN_STM8_OLED_DC, GPIO_Mode_Out_PP_Low_Fast);
    181              GPIO_Init(PORT_STM8_OLED, PIN_STM8_OLED_RST, GPIO_Mode_Out_PP_High_Fast);
    182          
    183              /* M25P128 controling line */
    184              //GPIO_Init(PORT_STM8_M25P, PIN_STM8_M25P_W, GPIO_Mode_Out_PP_High_Fast);
    185              //GPIO_Init(PORT_STM8_M25P, PIN_STM8_M25P_HOLD, GPIO_Mode_Out_PP_High_Fast);
    186          
    187              /* CC8530 controling line */
    188              GPIO_Init(PORT_STM8_8530, PIN_STM8_8530_RSTN, GPIO_Mode_Out_PP_High_Fast);
    189          
    190              SPI_Cmd(SPI1, ENABLE);
    191          }
    192          
    193          
    194          /**
    195            * Brief:  Exchange a byte for a byte with the slave.
    196            * Note:   In full duplex mod, reading is occuring while writing.
    197            * Param:  byte: Byte to send.
    198            * RetVal: Byte received.
    199            */
    200          uint8_t SPI_ExchangeByte(uint8_t byte)
    201          {
    202              while (SPI_GetFlagStatus(SPI1, SPI_FLAG_TXE) == RESET);
    203              SPI_SendData(SPI1, byte);
    204          
    205              while (SPI_GetFlagStatus(SPI1, SPI_FLAG_RXNE) == RESET);
    206              return SPI_ReceiveData(SPI1);
    207          }
    208          
    209          uint8_t SPI_ReadByte(void)
    210          {
    211              return (SPI_ExchangeByte(0xA5)); // dummy byte
    212          }
    213          
    214          
    215          /* I2C Operation ***************************************************************/
    216          /* For AK4637EN only. */
    217          
    218          void I2C_Config(void)
    219          {
    220          #if I2CTYPE == I2C_sim
    221              I2Csim_Init();
    222          #else // if it's I2C_chip
    223          
    224              //disableInterrupts();
    225          
    226              CLK_PeripheralClockConfig(CLK_Peripheral_I2C1, ENABLE);
    227              I2C_Init(I2C1, I2C_SPEED, 0xA0, I2C_Mode_I2C, I2C_DutyCycle_2,
    228                       I2C_Ack_Enable, I2C_AcknowledgedAddress_7bit);
    229              //I2C_ITConfig(I2C1, (I2C_IT_T)(I2C_IT_EVT | I2C_IT_BUF), ENABLE);
    230          
    231              //enableInterrupts();
    232          
    233          #endif
    234          
    235              GPIO_Init(PORT_STM8_4637, PIN_STM8_4637_PDN, GPIO_Mode_Out_PP_Low_Fast);
    236              GPIO_Init(PORT_STM8_4637, PIN_STM8_4637_LD, GPIO_Mode_Out_PP_High_Fast);
    237          }
    238          
    239          /* Note: The integrated I2C is not very practical for AK4637EN,
    240                     so I've decided to use the simulated type. */
    241          #if I2CTYPE == I2C_chip
    242          
    243          void I2C_Write_Byte(uint8_t byte)
    244          {
    245              while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY));
    246          
    247          
    248              I2C_GenerateSTART(I2C1, ENABLE);
    249          
    250              while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT));
    251          
    252              I2C_Send7bitAddress(I2C1, I2C_Address_4637, I2C_Direction_Transmitter);
    253          
    254              while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
    255          
    256              I2C_SendData(I2C1, byte);
    257          
    258              while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
    259          
    260              I2C_GenerateSTOP(I2C1, ENABLE);
    261          
    262          
    263              while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY));
    264          }
    265          
    266          uint8_t I2C_Read_Byte(void)
    267          {
    268              uint8_t temp = 0;
    269          
    270              while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY));
    271          
    272              I2C_GenerateSTART(I2C1, ENABLE);
    273          
    274              // EV5
    275              while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT));
    276          
    277              I2C_Send7bitAddress(I2C1, I2C_Address_4637, I2C_Direction_Receiver);
    278          
    279              // EV6
    280              while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));
    281          
    282              I2C_AcknowledgeConfig(I2C1, DISABLE);
    283              I2C_GenerateSTOP(I2C1, ENABLE);
    284          
    285              while ((I2C_GetFlagStatus(I2C1, I2C_FLAG_RXNE) == RESET));
    286          
    287              temp = I2C_ReceiveData(I2C1);
    288          
    289              while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY));
    290          
    291              return temp;
    292          }
    293          
    294          void I2C_Write_String(uint8_t* string, uint8_t nBytes)
    295          {
    296              uint8_t Idx = 0;
    297          
    298              while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY));
    299          
    300              I2C_GenerateSTART(I2C1, ENABLE);
    301          
    302              while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT));
    303          
    304              I2C_Send7bitAddress(I2C1, I2C_Address_4637, I2C_Direction_Transmitter);
    305          
    306              while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
    307          
    308              I2C_SendData(I2C1, string[Idx]);
    309          
    310              Idx++;
    311              nBytes--;
    312          
    313              while(nBytes)
    314              {
    315                  // EV8
    316                  while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTING));
    317          
    318                  I2C_SendData(I2C1, string[Idx]);
    319          
    320                  Idx++;
    321                  nBytes--;
    322              }
    323          
    324              while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
    325          
    326              I2C_GenerateSTOP(I2C1, ENABLE);
    327          
    328              while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY));
    329          }
    330          
    331          void I2C_Read_String(uint8_t* buffer, uint8_t nBytes)
    332          {
    333              uint8_t Idx = 0;
    334          
    335              while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY));
    336          
    337              I2C_GenerateSTART(I2C1, ENABLE);
    338          
    339              // EV5
    340              while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT));
    341          
    342              I2C_Send7bitAddress(I2C1, I2C_Address_4637, I2C_Direction_Receiver);
    343          
    344              // EV6
    345              while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));
    346          
    347              while(nBytes)
    348              {
    349                  if(nBytes == 1)
    350                  {
    351                      I2C_AcknowledgeConfig(I2C1, DISABLE);
    352                      I2C_GenerateSTOP(I2C1, ENABLE);
    353          
    354                      // EV7
    355                      while ((I2C_GetFlagStatus(I2C1, I2C_FLAG_RXNE) == RESET));
    356                      buffer[Idx] = I2C_ReceiveData(I2C1);
    357          
    358                      Idx++;
    359                      nBytes--;
    360                  }
    361                  if(nBytes != 1)
    362                  {
    363                      // EV7
    364                      while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED));
    365          
    366                      buffer[Idx] = I2C_ReceiveData(I2C1);
    367          
    368                      Idx++;
    369                      nBytes--;
    370                  }
    371                  /*
    372                  if(I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED))
    373                  {
    374                      Buffer[Idx] = I2C_ReceiveData(I2C1);
    375          
    376                      Idx++;
    377                      nBytes--;
    378                  }
    379                  */
    380              }
    381          
    382              while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY));
    383          }
    384          #endif // #if I2CTYPE == I2C_chip
    385          
    386          
    387          
    388          /* BSP Functions ***************************************************************/
    389          
    390          void Delay_ms(__IO uint32_t nTime)
    391          {
    392              TimingDelay = nTime;
    393              while (TimingDelay != 0);
    394          }// see rest part in stm8l15x_it.c
    395          
    396          
    397          void TimingDelay_Decrement(void)
    398          {
    399              if(TimingDelay != 0x00)
    400              {
    401                  TimingDelay--;
    402              }
    403          }// written for tim4 delay
    404          
    405          
    406          /* ----------------------------- End of file --------------------------------- */
    407          /*******************************************************************************/

   Section sizes:

   Bytes  Function/Label
   -----  --------------
      10  ??Subroutine8_0
       9  ??Subroutine9_0
      27  ?Subroutine0
      35  ?Subroutine1
       2  ?Subroutine2
       3  ?Subroutine3
       7  ?Subroutine4
       7  ?Subroutine5
       9  ?Subroutine6
      16  ?Subroutine7
      15  ?_0
      57  Battery_Config
      80  Battery_GetVoltage
      31  Delay_ms
       8  I2C_Config
      65  KEY_Config
       8  SCLK_Config
     127  SPI_Config
      39  SPI_ExchangeByte
      30  SPI_ReadByte
      78  System_Config
       5  TIM4_Config
       4  TimingDelay
      28  TimingDelay_Decrement
       1  UI

 
 681 bytes in section .far_func.text
   4 bytes in section .near.bss
   1 byte  in section .near.data
  15 bytes in section .near.rodata
 
 681 bytes of CODE  memory
  15 bytes of CONST memory
   5 bytes of DATA  memory

Errors: none
Warnings: none
