###############################################################################
#
# IAR C/C++ Compiler V2.10.4.157 for STM8                 16/May/2017  16:55:15
# Copyright 2010-2015 IAR Systems AB.
#
#    Source file  =  
#        H:\ProjectFile\AirTone\AirToneMLL\DRIVER\STM8L152C6\src\stm8l15x_lcd.c
#    Command line =  
#        H:\ProjectFile\AirTone\AirToneMLL\DRIVER\STM8L152C6\src\stm8l15x_lcd.c
#        -e -Oh --debug --code_model medium --data_model medium -o
#        H:\ProjectFile\AirTone\AirToneMLL\Debug\Obj\ --dlib_config
#        "F:\Embedded Workbench 7.0\stm8\LIB\dlstm8mmn.h" -lcN
#        H:\ProjectFile\AirTone\AirToneMLL\Debug\List\ -I
#        H:\ProjectFile\AirTone\AirToneMLL\BSP\ -I
#        H:\ProjectFile\AirTone\AirToneMLL\USER\ -I
#        H:\ProjectFile\AirTone\AirToneMLL\DRIVER\ -I
#        H:\ProjectFile\AirTone\AirToneMLL\DRIVER\Memory\ -I
#        H:\ProjectFile\AirTone\AirToneMLL\DRIVER\AK4637\ -I
#        H:\ProjectFile\AirTone\AirToneMLL\DRIVER\CC8530\ -I
#        H:\ProjectFile\AirTone\AirToneMLL\DRIVER\Serial\ -I
#        H:\ProjectFile\AirTone\AirToneMLL\DRIVER\OLED\ -I
#        H:\ProjectFile\AirTone\AirToneMLL\DRIVER\STM8L152C6\inc\ -I
#        H:\ProjectFile\AirTone\AirToneMLL|DRIVER\STM8L152C6\src\ --vregs 16
#    List file    =  
#        H:\ProjectFile\AirTone\AirToneMLL\Debug\List\stm8l15x_lcd.lst
#    Object file  =  H:\ProjectFile\AirTone\AirToneMLL\Debug\Obj\stm8l15x_lcd.o
#
###############################################################################

H:\ProjectFile\AirTone\AirToneMLL\DRIVER\STM8L152C6\src\stm8l15x_lcd.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm8l15x_lcd.c
      4            * @author  MCD Application Team
      5            * @version V1.6.1
      6            * @date    30-September-2014
      7            * @brief   This file provides firmware functions to manage the following 
      8            *          functionalities of the LCD controller (LCD) peripheral:           
      9            *           - Initialization and configuration
     10            *           - LCD RAM memory write
     11            *           - Interrupts and flags management   
     12            *           
     13            *  @verbatim
     14            *      
     15            *          ===================================================================      
     16            *                                    LCD Clock
     17            *          ===================================================================    
     18            *          LCD has tow clock sources:
     19            *            - RTCCLK divided by 2 used to generate LCD frame rate
     20            *            - LCDCLK to used for LCD registers read/write access
     21            *                   
     22            *          To configure the RTCCLK/LCDCLK, proceed as follows:
     23            *            - Enable RTC clock using CLK_PeripheralClockConfig(CLK_Peripheral_RTC, ENABLE)
     24            *              function
     25            *            - Enable LCD clock using CLK_PeripheralClockConfig(CLK_Peripheral_LCD, ENABLE)
     26            *              function  
     27            *            - Select the RTC clock source using the CLK_RTCClockConfig() function.    
     28            *            
     29            *          ===================================================================      
     30            *                                  LCD and low power modes
     31            *          =================================================================== 
     32            *          The LCD remains active during Active-halt, Wait, Low power run and 
     33            *          Low power wait modes unless disabled
     34            *              
     35            *          ===================================================================
     36            *                                 How to use this driver
     37            *          =================================================================== 
     38            *          1. Enable RTC clock using CLK_PeripheralClockConfig(CLK_Peripheral_RTC, ENABLE) function 
     39            *            
     40            *          2. Enable LCD clock using CLK_PeripheralClockConfig(CLK_Peripheral_LCD, ENABLE) function
     41            *            
     42            *          3. Select the RTC clock source using the CLK_RTCClockConfig() function. 
     43            *          
     44            *          4. Configure the LCD prescaler, divider, duty, bias and voltage source
     45            *             using LCD_Init() function     
     46            *            
     47            *          5. Call the LCD_PortMaskConfig() function to assign the unused SEGx
     48            *             (segment) and COMx (common) pins as standard general purpose IOs
     49            *
     50            *          6. Optionally you can enable/configure:
     51            *              -  LCD High Drive using the LCD_HighDriveCmd() function
     52            *              -  LCD Pulse ON Duration using the LCD_PulseOnDurationConfig() function
     53            *              -  LCD Dead Time using the LCD_DeadTimeConfig() function  
     54            *              -  The LCD Blink mode and frequency using the LCD_BlinkConfig() function
     55            *              -  The LCD Contrast using the LCD_ContrastConfig() function  
     56            *
     57            *          7. Call the LCD_Cmd() to enable the LCD controller
     58            *          
     59            *          8. Write to the LCD RAM memory using the LCD_WriteRAM() function.
     60            *          
     61            *  @endverbatim
     62            *           
     63            ******************************************************************************
     64            * @attention
     65            *
     66            * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
     67            *
     68            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     69            * You may not use this file except in compliance with the License.
     70            * You may obtain a copy of the License at:
     71            *
     72            *        http://www.st.com/software_license_agreement_liberty_v2
     73            *
     74            * Unless required by applicable law or agreed to in writing, software 
     75            * distributed under the License is distributed on an "AS IS" BASIS, 
     76            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     77            * See the License for the specific language governing permissions and
     78            * limitations under the License.
     79            *
     80            ******************************************************************************
     81            */
     82          
     83          /* Includes ------------------------------------------------------------------*/
     84          #include "stm8l15x_lcd.h"
     85          
     86          /** @addtogroup STM8L15x_StdPeriph_Driver
     87            * @{
     88            */
     89            
     90          /** @defgroup LCD 
     91            * @brief LCD driver modules
     92            * @{
     93            */
     94          /* Private typedef -----------------------------------------------------------*/
     95          /* Private define ------------------------------------------------------------*/
     96          /* Private macro -------------------------------------------------------------*/
     97          /* Private function prototypes -----------------------------------------------*/
     98          /* Private functions ---------------------------------------------------------*/
     99          
    100          /** @defgroup LCD_Private_Functions
    101            * @{
    102            */
    103          
    104          /** @defgroup LCD_Group1 Initialization and Configuration functions
    105           *  @brief   Initialization and Configuration functions 
    106           *
    107          @verbatim   
    108           ===============================================================================
    109                              Initialization and Configuration functions
    110           ===============================================================================  
    111          
    112          @endverbatim
    113            * @{
    114            */
    115            
    116          /**
    117            * @brief  Deinitializes the LCD Controller registers to their default reset values.
    118            * @param  None
    119            * @retval None
    120            */
    121          void LCD_DeInit(void)
    122          {
    123            uint8_t counter = 0;
    124          
    125            LCD->CR1 = LCD_CR1_RESET_VALUE;
    126            LCD->CR2 = LCD_CR2_RESET_VALUE;
    127            LCD->CR3 = LCD_CR3_RESET_VALUE;
    128            LCD->FRQ = LCD_FRQ_RESET_VALUE;
    129          
    130            for (counter = 0;counter < 0x05; counter++)
    131            {
    132              LCD->PM[counter] = LCD_PM_RESET_VALUE;
    133            }
    134          
    135            for (counter = 0;counter < 0x16; counter++)
    136            {
    137              LCD->RAM[counter] =  LCD_RAM_RESET_VALUE;
    138            }
    139          
    140            LCD->CR4 = LCD_CR4_RESET_VALUE;
    141          
    142          }
    143          
    144          /**
    145            * @brief  Initializes the LCD according to the specified parameters.
    146            * @param  LCD_CLKPrescalerDiv : LCD clock prescaler 
    147            *          This parameter can be one of the following values:
    148            *            @arg LCD_Prescaler_1: CLKprescaler = ClKinput 
    149            *            @arg LCD_Prescaler_2: CLKprescaler = ClKinput/2 
    150            *            @arg LCD_Prescaler_4: CLKprescaler = ClKinput/4
    151            *            @arg LCD_Prescaler_8: CLKprescaler = ClKinput/8 
    152            *            @arg LCD_Prescaler_16: CLKprescaler = ClKinput/16
    153            *            @arg LCD_Prescaler_32: CLKprescaler = ClKinput/32
    154            *            @arg LCD_Prescaler_64: CLKprescaler = ClKinput/64 
    155            *            @arg LCD_Prescaler_128: CLKprescaler = ClKinput/128 
    156            *            @arg LCD_Prescaler_256: CLKprescaler = ClKinput/256 
    157            *            @arg LCD_Prescaler_512: CLKprescaler = ClKinput/512 
    158            *            @arg LCD_Prescaler_1024: CLKprescaler = ClKinput/1024 
    159            *            @arg LCD_Prescaler_2048: CLKprescaler = ClKinput/2048 
    160            *            @arg LCD_Prescaler_4096: CLKprescaler = ClKinput/4096 
    161            *            @arg LCD_Prescaler_8192: CLKprescaler = ClKinput/8192 
    162            *            @arg LCD_Prescaler_16384: CLKprescaler = ClKinput/16384 
    163            *            @arg LCD_Prescaler_32768: CLKprescaler = ClKinput/32768              
    164            * @param  LCD_Divider : LCD clock divider
    165            *          This parameter can be one of the following values:
    166            *            @arg LCD_Divider_16: LCD frequency = CLKprescaler/16 
    167            *            @arg LCD_Divider_17: LCD frequency = CLKprescaler/17
    168            *            @arg LCD_Divider_18: LCD frequency = CLKprescaler/18
    169            *            @arg LCD_Divider_19: LCD frequency = CLKprescaler/19
    170            *            @arg LCD_Divider_20: LCD frequency = CLKprescaler/20
    171            *            @arg LCD_Divider_21: LCD frequency = CLKprescaler/21
    172            *            @arg LCD_Divider_22: LCD frequency = CLKprescaler/22
    173            *            @arg LCD_Divider_23: LCD frequency = CLKprescaler/23
    174            *            @arg LCD_Divider_24: LCD frequency = CLKprescaler/24
    175            *            @arg LCD_Divider_25: LCD frequency = CLKprescaler/25
    176            *            @arg LCD_Divider_26: LCD frequency = CLKprescaler/26
    177            *            @arg LCD_Divider_27: LCD frequency = CLKprescaler/27
    178            *            @arg LCD_Divider_28: LCD frequency = CLKprescaler/28
    179            *            @arg LCD_Divider_29: LCD frequency = CLKprescaler/29
    180            *            @arg LCD_Divider_30: LCD frequency = CLKprescaler/30
    181            *            @arg LCD_Divider_31: LCD frequency = CLKprescaler/31
    182            * @param  LCD_Duty : LCD duty
    183            *          This parameter can be one of the following values:
    184            *            @arg LCD_Duty_Static: Static duty 
    185            *            @arg LCD_Duty_1_2: 1/2 duty
    186            *            @arg LCD_Duty_1_3: 1/3 duty
    187            *            @arg LCD_Duty_1_4: 1/4 duty
    188            *            @arg LCD_Duty_1_8: 1/8 duty   
    189            * @param  LCD_Bias : LCD bias
    190            *          This parameter can be one of the following values:
    191            *            @arg LCD_Bias_1_4: 1/4 bias
    192            *            @arg LCD_Bias_1_3: 1/3 bias
    193            *            @arg LCD_Bias_1_2: 1/2 bias
    194            * @param  LCD_VoltageSource : LCD voltage source
    195            *          This parameter can be one of the following values:
    196            *            @arg LCD_VoltageSource_Internal: Internal voltage source
    197            *            @arg LCD_VoltageSource_External: External voltage source
    198            * @retval None
    199            */
    200          void LCD_Init(LCD_Prescaler_T LCD_Prescaler, LCD_Divider_T LCD_Divider,
    201                        LCD_Duty_T LCD_Duty, LCD_Bias_T LCD_Bias,
    202                        LCD_VoltageSource_T LCD_VoltageSource)
    203          {
    204            /* Check function parameters */
    205            assert_param(IS_LCD_CLOCK_PRESCALER(LCD_Prescaler));
    206            assert_param(IS_LCD_CLOCK_DIVIDER(LCD_Divider));
    207            assert_param(IS_LCD_DUTY(LCD_Duty));
    208            assert_param(IS_LCD_BIAS(LCD_Bias));
    209            assert_param(IS_LCD_VOLTAGE_SOURCE(LCD_VoltageSource));
    210          
    211            LCD->FRQ &= (uint8_t)(~LCD_FRQ_PS);     /* Clear the prescaler bits */
    212            LCD->FRQ |= LCD_Prescaler;
    213          
    214            LCD->FRQ &= (uint8_t)(~LCD_FRQ_DIV);     /* Clear the divider bits */
    215            LCD->FRQ |= LCD_Divider;
    216          
    217            /* Configure the Duty cycle */
    218            LCD->CR1 &= (uint8_t)(~LCD_CR1_DUTY);    /* Clear the duty bits */
    219            LCD->CR4 &= (uint8_t)(~LCD_CR4_DUTY8);   /* Clear the DUTY8 bit */
    220          
    221            if (LCD_Duty == LCD_Duty_1_8)
    222            {
    223              LCD->CR4 |= (uint8_t)((uint8_t)((uint8_t)LCD_Duty & (uint8_t)0xF0) >> 4);
    224            }
    225            else
    226            {
    227              LCD->CR1 |= (uint8_t)((uint8_t)LCD_Duty & (uint8_t)0x0F);
    228            }
    229          
    230            /* Configure the Bias */
    231            LCD->CR1 &= (uint8_t)(~LCD_CR1_B2);      /* Clear the B2 bit */
    232            LCD->CR4 &= (uint8_t)(~LCD_CR4_B4);      /* Clear the B4 bit */
    233          
    234            if (LCD_Bias == LCD_Bias_1_4)
    235            {
    236              LCD->CR1 |= (uint8_t)((uint8_t)LCD_Bias & (uint8_t)0x0F);
    237              LCD->CR4 |= (uint8_t)((uint8_t)((uint8_t)LCD_Bias & (uint8_t)0xF0) >> 4);
    238            }
    239            else
    240            {
    241              LCD->CR1 |= (uint8_t)((uint8_t)LCD_Bias & (uint8_t)0x0F);
    242            }
    243          
    244            LCD->CR2 &= (uint8_t)(~LCD_CR2_VSEL);    /* Clear the voltage source bit */
    245            LCD->CR2 |= LCD_VoltageSource;
    246          
    247          }
    248          
    249          /**
    250            * @brief  Configures the LCD Port Mask.
    251            * @param  LCD_PortMaskRegister: The LCD register index in the port mask matrix.
    252            *          This parameter can be one of the following values:
    253            *            @arg LCD_PortMaskRegister_0: PortMask Register 0  
    254            *            @arg LCD_PortMaskRegister_1: PortMask Register 1
    255            *            @arg LCD_PortMaskRegister_2: PortMask Register 2
    256            *            @arg LCD_PortMaskRegister_3: PortMask Register 3
    257            *            @arg LCD_PortMaskRegister_4: PortMask Register 4
    258            *            @arg LCD_PortMaskRegister_5: PortMask Register 5        
    259            * @param  LCD_Mask : Value to be written
    260            * @retval None
    261            */
    262          void LCD_PortMaskConfig(LCD_PortMaskRegister_T LCD_PortMaskRegister, uint8_t LCD_Mask)
    263          {
    264            /* Check function parameters */
    265            assert_param(IS_LCD_PORT_MASK(LCD_PortMaskRegister));
    266          
    267            /* Copy data bytes to Port mask register */
    268            LCD->PM[LCD_PortMaskRegister] =  LCD_Mask;
    269          
    270          }
    271          
    272          /**
    273            * @brief  Enables or disables the LCD Controller.
    274            * @param  NewState: new state of the LCD peripheral.
    275            *          This parameter can be: ENABLE or DISABLE.
    276            * @retval None
    277            * @retval None
    278            */
    279          void LCD_Cmd(FunctionalState NewState)
    280          {
    281            /* Check function parameters */
    282            assert_param(IS_FUNCTIONAL_STATE(NewState));
    283          
    284            if (NewState != DISABLE)
    285            {
    286              LCD->CR3 |= LCD_CR3_LCDEN; /* Enable the LCD peripheral*/
    287            }
    288            else
    289            {
    290              LCD->CR3 &= (uint8_t)(~LCD_CR3_LCDEN); /* Disable the LCD peripheral*/
    291            }
    292          }
    293          
    294          /**
    295            * @brief  Enables or disables the low resistance divider. Displays with high 
    296            *         internal resistance may need a longer drive time to achieve 
    297            *         satisfactory contrast. This function is useful in this case if some 
    298            *         additional power consumption can be tolerated.
    299            * @note   When this mode is enabled, the PulseOn Duration (PON) have to be 
    300            *         programmed to 1/CK_PS (LCD_PulseOnDuration_1).    
    301            * @param  NewState: new state of the low resistance divider.
    302            *          This parameter can be: ENABLE or DISABLE.
    303            * @retval None
    304            */
    305          void LCD_HighDriveCmd(FunctionalState NewState)
    306          {
    307            /* Check function parameters */
    308            assert_param(IS_FUNCTIONAL_STATE(NewState));
    309          
    310            if (NewState != DISABLE)
    311            {
    312              LCD->CR2 |= LCD_CR2_HD; /* Permanently enable low resistance divider */
    313            }
    314            else
    315            {
    316              LCD->CR2 &= (uint8_t)(~LCD_CR2_HD); /* Permanently disable low resistance divider */
    317            }
    318          }
    319          
    320          /**
    321            * @brief  Configures the LCD pulses on duration.
    322            * @param  LCD_PulseOnDuration: specifies the LCD pulse on duration in terms of 
    323            *         CLKprescaler (prescaled LCD clock period) pulses.
    324            *          This parameter can be one of the following values:
    325            *            @arg LCD_PulseOnDuration_0: 0 pulse
    326            *            @arg LCD_PulseOnDuration_1: Pulse ON duration = 1/CLKprescaler
    327            *            @arg LCD_PulseOnDuration_2: Pulse ON duration = 2/CLKprescaler
    328            *            @arg LCD_PulseOnDuration_3: Pulse ON duration = 3/CLKprescaler
    329            *            @arg LCD_PulseOnDuration_4: Pulse ON duration = 4/CLKprescaler
    330            *            @arg LCD_PulseOnDuration_5: Pulse ON duration = 5/CLKprescaler
    331            *            @arg LCD_PulseOnDuration_6: Pulse ON duration = 6/CLKprescaler
    332            *            @arg LCD_PulseOnDuration_7: Pulse ON duration = 7/CLKprescaler
    333            * @retval None
    334            */
    335          void LCD_PulseOnDurationConfig(LCD_PulseOnDuration_T LCD_PulseOnDuration)
    336          {
    337            /* Check function parameters */
    338            assert_param(IS_LCD_PULSE_DURATION(LCD_PulseOnDuration));
    339          
    340            LCD->CR2 &= (uint8_t)(~LCD_CR2_PON); /* Clear the pulses on duration bits */
    341            LCD->CR2 |= LCD_PulseOnDuration;
    342          }
    343          
    344          /**
    345            * @brief  Configures the LCD dead time.
    346            * @param  LCD_DeadTime: specifies the LCD dead time.
    347            *          This parameter can be one of the following values:
    348            *            @arg LCD_DeadTime_0: No dead Time
    349            *            @arg LCD_DeadTime_1: One Phase between different couple of Frame
    350            *            @arg LCD_DeadTime_2: Two Phase between different couple of Frame
    351            *            @arg LCD_DeadTime_3: Three Phase between different couple of Frame
    352            *            @arg LCD_DeadTime_4: Four Phase between different couple of Frame
    353            *            @arg LCD_DeadTime_5: Five Phase between different couple of Frame
    354            *            @arg LCD_DeadTime_6: Six Phase between different couple of Frame 
    355            *            @arg LCD_DeadTime_7: Seven Phase between different couple of Frame
    356            * @retval None
    357            */
    358          void LCD_DeadTimeConfig(LCD_DeadTime_T LCD_DeadTime)
    359          {
    360            /* Check function parameters */
    361            assert_param(IS_LCD_DEAD_TIME(LCD_DeadTime));
    362          
    363            LCD->CR3 &= (uint8_t)(~LCD_CR3_DEAD);  /* Clear the dead time bits  */
    364          
    365            LCD->CR3 |= LCD_DeadTime;
    366          
    367          }
    368          
    369          /**
    370            * @brief  Configures the LCD Blink mode and Blink frequency.
    371            * @param  LCD_BlinkMode: specifies the LCD blink mode.
    372            *          This parameter can be one of the following values:
    373            *            @arg LCD_BlinkMode_Off:           Blink disabled
    374            *            @arg LCD_BlinkMode_SEG0_COM0:     Blink enabled on SEG[0], COM[0] (1 pixel)
    375            *            @arg LCD_BlinkMode_SEG0_AllCOM:   Blink enabled on SEG[0], all COM (up to 8 
    376            *                                       pixels according to the programmed duty)
    377            *            @arg LCD_BlinkMode_AllSEG_AllCOM: Blink enabled on all SEG and all COM 
    378            *                                       (all pixels)
    379            * @param  LCD_BlinkFrequency: specifies the LCD blink frequency.
    380            *          This parameter can be one of the following values:
    381            *            @arg LCD_BlinkFrequency_Div8:    The Blink frequency = fLcd/8
    382            *            @arg LCD_BlinkFrequency_Div16:   The Blink frequency = fLcd/16
    383            *            @arg LCD_BlinkFrequency_Div32:   The Blink frequency = fLcd/32
    384            *            @arg LCD_BlinkFrequency_Div64:   The Blink frequency = fLcd/64 
    385            *            @arg LCD_BlinkFrequency_Div128:  The Blink frequency = fLcd/128
    386            *            @arg LCD_BlinkFrequency_Div256:  The Blink frequency = fLcd/256
    387            *            @arg LCD_BlinkFrequency_Div512:  The Blink frequency = fLcd/512
    388            *            @arg LCD_BlinkFrequency_Div1024: The Blink frequency = fLcd/1024
    389            * @retval None
    390            */
    391          void LCD_BlinkConfig(LCD_BlinkMode_T LCD_BlinkMode, LCD_BlinkFrequency_T LCD_BlinkFrequency)
    392          {
    393            /* Check function parameters */
    394            assert_param(IS_LCD_BLINK_MODE(LCD_BlinkMode));
    395            assert_param(IS_LCD_BLINK_FREQUENCY(LCD_BlinkFrequency));
    396          
    397            LCD->CR1 &= (uint8_t)(~LCD_CR1_BLINK); /* Clear the blink mode bits */
    398            LCD->CR1 |= LCD_BlinkMode; /* Config the LCD Blink Mode */
    399          
    400            LCD->CR1 &= (uint8_t)(~LCD_CR1_BLINKF); /* Clear the blink frequency bits */
    401            LCD->CR1 |= LCD_BlinkFrequency; /* Config the LCD Blink Frequency */
    402          
    403          }
    404          
    405          /**
    406            * @brief  Configures the LCD Contrast.
    407            * @param  LCD_Contrast: specifies the LCD Contrast.
    408            *          This parameter can be one of the following values:
    409            *            @arg LCD_Contrast_Level_0: Medium Density / High Density Maximum Voltage = 2.60V / 2.60V 
    410            *            @arg LCD_Contrast_Level_1: Medium Density / High Density Maximum Voltage = 2.70V / 2.73V
    411            *            @arg LCD_Contrast_Level_2: Medium Density / High Density Maximum Voltage = 2.80V / 2.86V
    412            *            @arg LCD_Contrast_Level_3: Medium Density / High Density Maximum Voltage = 2.90V / 2.99V
    413            *            @arg LCD_Contrast_Level_4: Medium Density / High Density Maximum Voltage = 3.00V / 3.12V
    414            *            @arg LCD_Contrast_Level_5: Medium Density / High Density Maximum Voltage = 3.10V / 3.25V
    415            *            @arg LCD_Contrast_Level_6: Medium Density / High Density Maximum Voltage = 3.20V / 3.38V
    416            *            @arg LCD_Contrast_Level_7: Medium Density / High Density Maximum Voltage = 3.30V / 3.51V
    417            * @retval None
    418            */
    419          void LCD_ContrastConfig(LCD_Contrast_T LCD_Contrast)
    420          {
    421            /* Check function parameters */
    422            assert_param(IS_LCD_CONTRAST(LCD_Contrast));
    423          
    424            LCD->CR2 &= (uint8_t)(~LCD_CR2_CC); /* Clear the contrast bits  */
    425            LCD->CR2 |= LCD_Contrast; /* Select the maximum voltage value Vlcd */
    426          
    427          }
    428          
    429          /**
    430            * @}
    431            */
    432          
    433          /** @defgroup LCD_Group2  LCD RAM memory write functions
    434           *  @brief    LCD RAM memory write functions 
    435           *
    436          @verbatim   
    437           ===============================================================================
    438                                     LCD RAM memory write functions
    439           ===============================================================================  
    440          
    441          @endverbatim
    442            * @{
    443            */
    444          
    445          /**
    446            * @brief  Writes a word in the specific LCD RAM.
    447            * @param  LCD_RAMRegister: specifies the LCD Contrast.
    448            *          This parameter can be one of the following values:
    449            *            @arg LCD_RAMRegister_0: LCD RAM Register 0
    450            *            @arg LCD_RAMRegister_1: LCD RAM Register 1
    451            *            @arg LCD_RAMRegister_2: LCD RAM Register 2
    452            *            @arg LCD_RAMRegister_3: LCD RAM Register 3
    453            *            @arg LCD_RAMRegister_4: LCD RAM Register 4
    454            *            @arg LCD_RAMRegister_5: LCD RAM Register 5
    455            *            @arg LCD_RAMRegister_6: LCD RAM Register 6 
    456            *            @arg LCD_RAMRegister_7: LCD RAM Register 7  
    457            *            @arg LCD_RAMRegister_8: LCD RAM Register 8
    458            *            @arg LCD_RAMRegister_9: LCD RAM Register 9
    459            *            @arg LCD_RAMRegister_10: LCD RAM Register 10
    460            *            @arg LCD_RAMRegister_11: LCD RAM Register 11
    461            *            @arg LCD_RAMRegister_12: LCD RAM Register 12 
    462            *            @arg LCD_RAMRegister_13: LCD RAM Register 13 
    463            *            @arg LCD_RAMRegister_14: LCD RAM Register 14 
    464            *            @arg LCD_RAMRegister_15: LCD RAM Register 15
    465            *            @arg LCD_RAMRegister_15: LCD RAM Register 16 
    466            *            @arg LCD_RAMRegister_15: LCD RAM Register 17 
    467            *            @arg LCD_RAMRegister_15: LCD RAM Register 18 
    468            *            @arg LCD_RAMRegister_15: LCD RAM Register 19 
    469            *            @arg LCD_RAMRegister_15: LCD RAM Register 20 
    470            *            @arg LCD_RAMRegister_15: LCD RAM Register 21             
    471            * @param  LCD_Data: specifies LCD Data Value to be written.
    472            * @retval None
    473            */
    474          void LCD_WriteRAM(LCD_RAMRegister_T LCD_RAMRegister, uint8_t LCD_Data)
    475          {
    476            /* Check function parameters */
    477            assert_param(IS_LCD_RAM_REGISTER(LCD_RAMRegister));
    478          
    479            /* Copy data bytes to RAM register */
    480            LCD->RAM[LCD_RAMRegister] =  LCD_Data;
    481          
    482          }
    483          
    484          /**
    485            * @brief  Select the LCD page where the data will be written.
    486            * @param  LCD_Page: The accessed LCD page.
    487            *          This parameter can be one of the following values:
    488            *            @arg LCD_PageSelection_FirstPage: The LCD RAM is selected as the first page
    489            *            @arg LCD_PageSelection_SecondPage: The LCD RAM is selected as the second page  
    490            * @retval None
    491            */
    492          void LCD_PageSelect(LCD_PageSelection_T LCD_PageSelection)
    493          {
    494            /* Check function parameters */
    495            assert_param(IS_LCD_PAGE_SELECT(LCD_PageSelection));
    496          
    497            LCD->CR4 &= (uint8_t)(~LCD_CR4_PAGECOM); /* Clear the PAGE COM bit */
    498            LCD->CR4 |= LCD_PageSelection; /* Select the LCD page */
    499          
    500          }
    501          
    502          /**
    503            * @}
    504            */
    505          
    506          /** @defgroup LCD_Group3 Interrupts and flags management functions
    507           *  @brief   Interrupts and flags management functions 
    508           *
    509          @verbatim   
    510           ===============================================================================
    511                             Interrupts and flags management functions
    512           ===============================================================================  
    513          
    514          @endverbatim
    515            * @{
    516            */
    517            
    518            
    519          /**
    520            * @brief  Enables or disables the start of frame interrupt.
    521            * @param NewState: new state of the specified LCD interrupts.
    522            *          This parameter can be: ENABLE or DISABLE.
    523            * @retval None
    524            */
    525          void LCD_ITConfig(FunctionalState NewState)
    526          {
    527            /* Check function parameters */
    528            assert_param(IS_FUNCTIONAL_STATE(NewState));
    529          
    530            if (NewState != DISABLE)
    531            {
    532              LCD->CR3 |= LCD_CR3_SOFIE; /* Enable interrupt*/
    533            }
    534            else
    535            {
    536              LCD->CR3 &= (uint8_t)(~LCD_CR3_SOFIE); /* Disable interrupt*/
    537            }
    538          
    539          }
    540          
    541          /**
    542            * @brief  Checks whether the LCD start of new frame flag is set or not.
    543            * @retval The new state of the start of new frame flag.
    544            *   This returned value can be: SET or RESET.   
    545            */
    546          FlagStatus LCD_GetFlagStatus(void)
    547          {
    548            FlagStatus status = RESET;
    549          
    550            /* Check the status of the start of new frame LCD flag */
    551            if ((LCD->CR3 & (uint8_t)LCD_CR3_SOF) != (uint8_t)RESET)
    552            {
    553              status = SET; /* Flag is set */
    554            }
    555            else
    556            {
    557              status = RESET; /* Flag is reset*/
    558            }
    559            /* Return the FLAG status */
    560            return status;
    561          
    562          }
    563          
    564          /**
    565            * @brief  Clears the start of frame LCD flag.
    566            * @param  None
    567            * @retval None
    568            */
    569          void LCD_ClearFlag(void)
    570          {
    571            /* Clear the flag bit */
    572            LCD->CR3 |= (uint8_t)(LCD_CR3_SOFC);
    573          
    574          }
    575          
    576          /**
    577            * @brief  Checks whether the start of frame interrupt has occurred or not.
    578            * @param  None
    579            * @retval The new state of the start of new frame interrupt.
    580            *   This returned value can be: SET or RESET.   
    581            */
    582          ITStatus LCD_GetITStatus(void)
    583          {
    584            ITStatus pendingbitstatus = RESET;
    585            uint8_t enablestatus = 0;
    586          
    587            enablestatus = (uint8_t)((uint8_t)LCD->CR3 & LCD_CR3_SOFIE);
    588            /* Check the status of the start of frame interrupt */
    589            if (((LCD->CR3 & LCD_CR3_SOF) != RESET) && enablestatus)
    590            {
    591              /* ITPENDINGBIT is set */
    592              pendingbitstatus = SET;
    593            }
    594            else
    595            {
    596              /* ITPENDINGBIT is reset */
    597              pendingbitstatus = RESET;
    598            }
    599            /* Return the ITPENDINGBIT status */
    600            return  pendingbitstatus;
    601          
    602          }
    603          
    604          /**
    605            * @brief  Clears the start of frame interrupt pending bits.
    606            * @param  None
    607            * @retval None
    608            */
    609          void LCD_ClearITPendingBit(void)
    610          {
    611            /* Clear the flag bit */
    612            LCD->CR3 |= (uint8_t)(LCD_CR3_SOFC);
    613          
    614          }
    615          
    616          /**
    617            * @}
    618            */
    619          
    620          /**
    621            * @}
    622            */
    623          
    624          /**
    625            * @}
    626            */
    627          
    628          /**
    629            * @}
    630            */
    631          
    632          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Section sizes:

   Bytes  Function/Label
   -----  --------------
       7  ??Subroutine2_0
      12  ?Subroutine0
       2  ?Subroutine1
      31  LCD_BlinkConfig
       5  LCD_ClearFlag
       5  LCD_ClearITPendingBit
      13  LCD_Cmd
      12  LCD_ContrastConfig
      55  LCD_DeInit
      19  LCD_DeadTimeConfig
       9  LCD_GetFlagStatus
      32  LCD_GetITStatus
      13  LCD_HighDriveCmd
      13  LCD_ITConfig
     105  LCD_Init
      11  LCD_PageSelect
       9  LCD_PortMaskConfig
      12  LCD_PulseOnDurationConfig
       9  LCD_WriteRAM

 
 374 bytes in section .far_func.text
 
 374 bytes of CODE memory

Errors: none
Warnings: none
