###############################################################################
#
# IAR C/C++ Compiler V2.10.4.157 for STM8                 16/May/2017  16:55:14
# Copyright 2010-2015 IAR Systems AB.
#
#    Source file  =  
#        H:\ProjectFile\AirTone\AirToneMLL\DRIVER\STM8L152C6\src\stm8l15x_itc.c
#    Command line =  
#        H:\ProjectFile\AirTone\AirToneMLL\DRIVER\STM8L152C6\src\stm8l15x_itc.c
#        -e -Oh --debug --code_model medium --data_model medium -o
#        H:\ProjectFile\AirTone\AirToneMLL\Debug\Obj\ --dlib_config
#        "F:\Embedded Workbench 7.0\stm8\LIB\dlstm8mmn.h" -lcN
#        H:\ProjectFile\AirTone\AirToneMLL\Debug\List\ -I
#        H:\ProjectFile\AirTone\AirToneMLL\BSP\ -I
#        H:\ProjectFile\AirTone\AirToneMLL\USER\ -I
#        H:\ProjectFile\AirTone\AirToneMLL\DRIVER\ -I
#        H:\ProjectFile\AirTone\AirToneMLL\DRIVER\Memory\ -I
#        H:\ProjectFile\AirTone\AirToneMLL\DRIVER\AK4637\ -I
#        H:\ProjectFile\AirTone\AirToneMLL\DRIVER\CC8530\ -I
#        H:\ProjectFile\AirTone\AirToneMLL\DRIVER\Serial\ -I
#        H:\ProjectFile\AirTone\AirToneMLL\DRIVER\OLED\ -I
#        H:\ProjectFile\AirTone\AirToneMLL\DRIVER\STM8L152C6\inc\ -I
#        H:\ProjectFile\AirTone\AirToneMLL|DRIVER\STM8L152C6\src\ --vregs 16
#    List file    =  
#        H:\ProjectFile\AirTone\AirToneMLL\Debug\List\stm8l15x_itc.lst
#    Object file  =  H:\ProjectFile\AirTone\AirToneMLL\Debug\Obj\stm8l15x_itc.o
#
###############################################################################

H:\ProjectFile\AirTone\AirToneMLL\DRIVER\STM8L152C6\src\stm8l15x_itc.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm8l15x_itc.c
      4            * @author  MCD Application Team
      5            * @version V1.6.1
      6            * @date    30-September-2014
      7            * @brief   This file provides firmware functions to manage the following 
      8            *          functionality of the Interrupt controller (ITC) peripheral:           
      9            *           - Configuration and management
     10            ******************************************************************************
     11            * @attention
     12            *
     13            * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
     14            *
     15            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     16            * You may not use this file except in compliance with the License.
     17            * You may obtain a copy of the License at:
     18            *
     19            *        http://www.st.com/software_license_agreement_liberty_v2
     20            *
     21            * Unless required by applicable law or agreed to in writing, software 
     22            * distributed under the License is distributed on an "AS IS" BASIS, 
     23            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     24            * See the License for the specific language governing permissions and
     25            * limitations under the License.
     26            *
     27            ******************************************************************************
     28            */
     29          
     30          /* Includes ------------------------------------------------------------------*/
     31          #include "stm8l15x_itc.h"
     32          
     33          /** @addtogroup STM8L15x_StdPeriph_Driver
     34            * @{
     35            */
     36            
     37          /** @defgroup ITC 
     38            * @brief ITC driver modules
     39            * @{
     40            */ 
     41          /* Private typedef -----------------------------------------------------------*/
     42          /* Private define ------------------------------------------------------------*/
     43          /* Private macro -------------------------------------------------------------*/
     44          /* Private function prototypes -----------------------------------------------*/
     45          /* Private functions ---------------------------------------------------------*/
     46          
     47          /** @defgroup ITC_Private_Functions
     48            * @{
     49            */
     50          
     51          /**
     52            * @brief  Utility function used to read CC register.
     53            * @param  None
     54            * @retval CPU CC register value
     55            */
     56          uint8_t ITC_GetCPUCC(void)
     57          {
     58          #ifdef _COSMIC_
     59            _asm("push cc");
     60            _asm("pop a");
     61            return; /* Ignore compiler warning, the returned value is in A register */
     62          #elif defined _RAISONANCE_ /* _RAISONANCE_ */
     63            return _getCC_();
     64          #else /* _IAR_ */
     65            asm("push cc");
     66            asm("pop a"); /* Ignore compiler warning, the returned value is in A register */
     67          #endif /* _COSMIC_*/
     68          }
     69          
     70          /** @defgroup ITC_Group1 ITC configuration and management functions
     71           *  @brief   ITC configuration and management functions
     72           *
     73          @verbatim   
     74           ===============================================================================
     75                            ITC configuration and management functions
     76           ===============================================================================  
     77          
     78          @endverbatim
     79            * @{
     80            */
     81            
     82          /**
     83            * @brief  Deinitializes the ITC registers to their default reset value.
     84            * @param  None
     85            * @retval None
     86           */
     87          void ITC_DeInit(void)
     88          {
     89            ITC->ISPR1 = ITC_SPRX_RESET_VALUE;
     90            ITC->ISPR2 = ITC_SPRX_RESET_VALUE;
     91            ITC->ISPR3 = ITC_SPRX_RESET_VALUE;
     92            ITC->ISPR4 = ITC_SPRX_RESET_VALUE;
     93            ITC->ISPR5 = ITC_SPRX_RESET_VALUE;
     94            ITC->ISPR6 = ITC_SPRX_RESET_VALUE;
     95            ITC->ISPR7 = ITC_SPRX_RESET_VALUE;
     96            ITC->ISPR8 = ITC_SPRX_RESET_VALUE;
     97          }
     98          
     99          /**
    100            * @brief  Gets the interrupt software priority bits (I1, I0) value from CPU CC register.
    101            * @param  None
    102            * @retval The interrupt software priority bits value.
    103           */
    104          uint8_t ITC_GetSoftIntStatus(void)
    105          {
    106            return ((uint8_t)(ITC_GetCPUCC() & CPU_SOFT_INT_DISABLED));
    107          }
    108          
    109          /**
    110            * @brief  Gets the software priority of the specified interrupt source.
    111            * @param  IRQn : Specifies the peripheral interrupt source.
    112            * @retval Specifies the software priority of the interrupt source.
    113           */
    114          ITC_PriorityLevel_T ITC_GetSoftwarePriority(IRQn_T IRQn)
    115          {
    116            uint8_t Value = 0;
    117            uint8_t Mask = 0;
    118          
    119            /* Check function parameters */
    120            assert_param(IS_ITC_IRQ(IRQn));
    121          
    122            /* Define the mask corresponding to the bits position in the SPR register */
    123            Mask = (uint8_t)(0x03U << ((IRQn % 4U) * 2U));
    124          
    125            switch (IRQn)
    126            {
    127              case FLASH_IRQn:
    128              case DMA1_CHANNEL0_1_IRQn:
    129              case DMA1_CHANNEL2_3_IRQn:
    130                Value = (uint8_t)(ITC->ISPR1 & Mask); /* Read software priority */
    131                break;
    132          
    133              case EXTIE_F_PVD_IRQn:
    134          #if defined (STM8L15X_MD) || defined (STM8L05X_MD_VL) || defined (STM8AL31_L_MD)
    135              case RTC_IRQn:
    136              case EXTIB_IRQn:
    137              case EXTID_IRQn:
    138          #elif defined (STM8L15X_LD) || defined (STM8L05X_LD_VL)
    139              case RTC_CSSLSE_IRQn:
    140              case EXTIB_IRQn:
    141              case EXTID_IRQn:
    142          #elif defined (STM8L15X_HD) || defined (STM8L15X_MDP) || defined (STM8L05X_HD_VL)
    143              case RTC_CSSLSE_IRQn:
    144              case EXTIB_G_IRQn:
    145              case EXTID_H_IRQn:
    146          #endif  /* STM8L15X_MD */
    147                Value = (uint8_t)(ITC->ISPR2 & Mask); /* Read software priority */
    148                break;
    149          
    150              case EXTI0_IRQn:
    151              case EXTI1_IRQn:
    152              case EXTI2_IRQn:
    153              case EXTI3_IRQn:
    154                Value = (uint8_t)(ITC->ISPR3 & Mask); /* Read software priority */
    155                break;
    156          
    157              case EXTI4_IRQn:
    158              case EXTI5_IRQn:
    159              case EXTI6_IRQn:
    160              case EXTI7_IRQn:
    161                Value = (uint8_t)(ITC->ISPR4 & Mask); /* Read software priority */
    162                break;
    163          
    164          #if defined (STM8L15X_LD) || defined (STM8L05X_LD_VL)
    165              case SWITCH_CSS_IRQn:
    166          #else
    167              case SWITCH_CSS_BREAK_DAC_IRQn:
    168          #endif /* STM8L15X_LD */		
    169              case ADC1_COMP_IRQn:
    170          #if defined (STM8L15X_MD) || defined (STM8L05X_MD_VL) || defined (STM8AL31_L_MD)
    171              case LCD_IRQn:
    172              case TIM2_UPD_OVF_TRG_BRK_IRQn:
    173          #elif defined (STM8L15X_LD) || defined (STM8L05X_LD_VL)
    174              case TIM2_UPD_OVF_TRG_BRK_IRQn:
    175          #elif defined (STM8L15X_HD) || defined (STM8L15X_MDP) || defined (STM8L05X_HD_VL)
    176              case LCD_AES_IRQn:
    177              case TIM2_UPD_OVF_TRG_BRK_USART2_TX_IRQn:
    178          #endif  /* STM8L15X_MD */
    179                Value = (uint8_t)(ITC->ISPR5 & Mask); /* Read software priority */
    180                break;
    181          			
    182          #if !defined (STM8L15X_LD) && !defined (STM8L05X_LD_VL)
    183              case TIM1_UPD_OVF_TRG_IRQn:
    184          #endif /* STM8L15X_LD */		
    185          #if defined (STM8L15X_MD) || defined (STM8L15X_LD) || defined (STM8L05X_MD_VL) ||\
    186           defined (STM8AL31_L_MD) || defined (STM8L05X_LD_VL)
    187              case TIM2_CC_IRQn:
    188              case TIM3_UPD_OVF_TRG_BRK_IRQn :
    189              case TIM3_CC_IRQn:
    190          #elif defined (STM8L15X_HD) || defined (STM8L15X_MDP) || defined (STM8L05X_HD_VL)
    191              case TIM2_CC_USART2_RX_IRQn:
    192              case TIM3_UPD_OVF_TRG_BRK_USART3_TX_IRQn :
    193              case TIM3_CC_USART3_RX_IRQn:
    194          #endif  /* STM8L15X_MD */
    195                Value = (uint8_t)(ITC->ISPR6 & Mask); /* Read software priority */
    196                break;
    197          			
    198          #if !defined (STM8L15X_LD) && !defined (STM8L05X_LD_VL)
    199              case TIM1_CC_IRQn:
    200          #endif /* STM8L15X_LD */	
    201              case TIM4_UPD_OVF_TRG_IRQn:
    202              case SPI1_IRQn:
    203          #if defined (STM8L15X_MD) || defined (STM8L15X_LD) || defined (STM8L05X_MD_VL) ||\
    204           defined (STM8AL31_L_MD) || defined (STM8L05X_LD_VL)
    205              case USART1_TX_IRQn:
    206          #elif defined (STM8L15X_HD) || defined (STM8L15X_MDP) || defined (STM8L05X_HD_VL)
    207              case USART1_TX_TIM5_UPD_OVF_TRG_BRK_IRQn:
    208          #endif  /* STM8L15X_MD || STM8L15X_LD */
    209                Value = (uint8_t)(ITC->ISPR7 & Mask); /* Read software priority */
    210                break;
    211          
    212          #if defined (STM8L15X_MD) || defined (STM8L15X_LD) || defined (STM8L05X_MD_VL) ||\
    213           defined (STM8AL31_L_MD) || defined (STM8L05X_LD_VL)
    214              case USART1_RX_IRQn:
    215              case I2C1_IRQn:
    216          #elif defined (STM8L15X_HD) || defined (STM8L15X_MDP) || defined (STM8L05X_HD_VL)
    217              case USART1_RX_TIM5_CC_IRQn:
    218              case I2C1_SPI2_IRQn:
    219          #endif  /* STM8L15X_MD || STM8L15X_LD*/
    220                Value = (uint8_t)(ITC->ISPR8 & Mask); /* Read software priority */
    221                break;
    222          
    223              default:
    224                break;
    225            }
    226          
    227            Value >>= (uint8_t)((IRQn % 4u) * 2u);
    228          
    229            return((ITC_PriorityLevel_T)Value);
    230          
    231          }
    232          
    233          /**
    234            * @brief  Sets the software priority of the specified interrupt source.
    235            * @note   The modification of the software priority is only possible when
    236            *         the interrupts are disabled.
    237            * @note   The normal behavior is to disable the interrupt before calling
    238            *         this function, and re-enable it after.
    239            * @note   The priority level 0 cannot be set (see product specification
    240            *         for more details).
    241            * @param  IRQn : Specifies the peripheral interrupt source.
    242            * @param  ITC_PriorityLevel : Specifies the software priority value to set
    243            *          This parameter can be one of the following values:
    244            *            @arg ITC_PriorityLevel_0: Software priority level 0 (cannot be written)
    245            *            @arg ITC_PriorityLevel_1: Software priority level 1
    246            *            @arg ITC_PriorityLevel_2: Software priority level 2
    247            *            @arg ITC_PriorityLevel_3: Software priority level 3     
    248            * @retval None
    249            */
    250          void ITC_SetSoftwarePriority(IRQn_T IRQn, ITC_PriorityLevel_T ITC_PriorityLevel)
    251          {
    252            uint8_t Mask = 0;
    253            uint8_t NewPriority = 0;
    254          
    255            /* Check function parameters */
    256            assert_param(IS_ITC_IRQ(IRQn));
    257            assert_param(IS_ITC_PRIORITY(ITC_PriorityLevel));
    258          
    259            /* Check if interrupts are disabled */
    260            assert_param(IS_ITC_INTERRUPTS_DISABLED);
    261          
    262            /* Define the mask corresponding to the bits position in the SPR register */
    263            /* The mask is reversed in order to clear the 2 bits after more easily */
    264            Mask = (uint8_t)(~(uint8_t)(0x03U << ((IRQn % 4U) * 2U)));
    265            /* Define the new priority to write */
    266            NewPriority = (uint8_t)((uint8_t)(ITC_PriorityLevel) << ((IRQn % 4U) * 2U));
    267          
    268            switch (IRQn)
    269            {
    270              case FLASH_IRQn:
    271              case DMA1_CHANNEL0_1_IRQn:
    272              case DMA1_CHANNEL2_3_IRQn:
    273                ITC->ISPR1 &= Mask;
    274                ITC->ISPR1 |= NewPriority;
    275                break;
    276          
    277              case EXTIE_F_PVD_IRQn:
    278          #if defined (STM8L15X_MD) || defined (STM8L05X_MD_VL) || defined (STM8AL31_L_MD)
    279              case RTC_IRQn:
    280              case EXTIB_IRQn:
    281              case EXTID_IRQn:
    282          #elif defined (STM8L15X_LD) || defined (STM8L05X_LD_VL)
    283              case RTC_CSSLSE_IRQn:
    284              case EXTIB_IRQn:
    285              case EXTID_IRQn:
    286          #elif defined (STM8L15X_HD) || defined (STM8L15X_MDP) || defined (STM8L05X_HD_VL)
    287              case RTC_CSSLSE_IRQn:
    288              case EXTIB_G_IRQn:
    289              case EXTID_H_IRQn:
    290          #endif  /* STM8L15X_MD */
    291                ITC->ISPR2 &= Mask;
    292                ITC->ISPR2 |= NewPriority;
    293                break;
    294          
    295              case EXTI0_IRQn:
    296              case EXTI1_IRQn:
    297              case EXTI2_IRQn:
    298              case EXTI3_IRQn:
    299                ITC->ISPR3 &= Mask;
    300                ITC->ISPR3 |= NewPriority;
    301                break;
    302          
    303              case EXTI4_IRQn:
    304              case EXTI5_IRQn:
    305              case EXTI6_IRQn:
    306              case EXTI7_IRQn:
    307                ITC->ISPR4 &= Mask;
    308                ITC->ISPR4 |= NewPriority;
    309                break;
    310          #if !defined (STM8L15X_LD) && !defined (STM8L05X_LD_VL)
    311              case SWITCH_CSS_BREAK_DAC_IRQn:
    312          #else
    313              case SWITCH_CSS_IRQn:
    314          #endif /*	STM8L15X_LD	*/
    315              case ADC1_COMP_IRQn:
    316          #if defined (STM8L15X_MD) || defined (STM8L05X_MD_VL) || defined (STM8AL31_L_MD)
    317              case LCD_IRQn:
    318              case TIM2_UPD_OVF_TRG_BRK_IRQn:
    319          #elif defined (STM8L15X_LD) || defined (STM8L05X_LD_VL)
    320              case TIM2_UPD_OVF_TRG_BRK_IRQn:
    321          #elif defined (STM8L15X_HD) || defined (STM8L15X_MDP) || defined (STM8L05X_HD_VL)
    322              case LCD_AES_IRQn:
    323              case TIM2_UPD_OVF_TRG_BRK_USART2_TX_IRQn:
    324          #endif  /* STM8L15X_MD */
    325                ITC->ISPR5 &= Mask;
    326                ITC->ISPR5 |= NewPriority;
    327                break;
    328          #if !defined (STM8L15X_LD) && !defined (STM8L05X_LD_VL)
    329              case TIM1_UPD_OVF_TRG_IRQn:
    330          #endif  /* STM8L15X_LD */
    331          #if defined (STM8L15X_MD) || defined (STM8L15X_LD) || defined (STM8L05X_MD_VL) ||\
    332           defined (STM8AL31_L_MD) || defined (STM8L05X_LD_VL)
    333              case TIM2_CC_IRQn:
    334              case TIM3_UPD_OVF_TRG_BRK_IRQn :
    335              case TIM3_CC_IRQn:
    336          #elif defined (STM8L15X_HD) || defined (STM8L15X_MDP) || defined (STM8L05X_HD_VL)
    337              case TIM2_CC_USART2_RX_IRQn:
    338              case TIM3_UPD_OVF_TRG_BRK_USART3_TX_IRQn :
    339              case TIM3_CC_USART3_RX_IRQn:
    340          #endif  /* STM8L15X_MD */
    341                ITC->ISPR6 &= Mask;
    342                ITC->ISPR6 |= NewPriority;
    343                break;
    344          
    345          #if !defined (STM8L15X_LD) && !defined (STM8L05X_LD_VL)
    346              case TIM1_CC_IRQn:
    347          #endif  /* STM8L15X_LD */
    348              case TIM4_UPD_OVF_TRG_IRQn:
    349              case SPI1_IRQn:
    350          #if defined (STM8L15X_MD) || defined (STM8L15X_LD) || defined (STM8L05X_MD_VL) ||\
    351           defined (STM8AL31_L_MD) || defined (STM8L05X_LD_VL)
    352              case USART1_TX_IRQn:
    353          #elif defined (STM8L15X_HD) || defined (STM8L15X_MDP) || defined (STM8L05X_HD_VL)
    354              case USART1_TX_TIM5_UPD_OVF_TRG_BRK_IRQn:
    355          #endif  /* STM8L15X_MD */
    356                ITC->ISPR7 &= Mask;
    357                ITC->ISPR7 |= NewPriority;
    358                break;
    359          
    360          #if defined (STM8L15X_MD) || defined (STM8L15X_LD) || defined (STM8L05X_MD_VL) ||\
    361           defined (STM8AL31_L_MD) || defined (STM8L05X_LD_VL)
    362              case USART1_RX_IRQn:
    363              case I2C1_IRQn:
    364          #elif defined (STM8L15X_HD) || defined (STM8L15X_MDP) || defined (STM8L05X_HD_VL)
    365              case USART1_RX_TIM5_CC_IRQn:
    366              case I2C1_SPI2_IRQn:
    367          #endif  /* STM8L15X_MD */
    368                ITC->ISPR8 &= Mask;
    369                ITC->ISPR8 |= NewPriority;
    370                break;
    371          
    372              default:
    373                break;
    374            }
    375          }
    376          
    377          /**
    378            * @}
    379            */
    380          
    381          /**
    382            * @}
    383            */
    384          
    385          /**
    386            * @}
    387            */
    388          
    389          /**
    390            * @}
    391            */
    392            
    393          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Section sizes:

   Bytes  Function/Label
   -----  --------------
      14  ?Subroutine0
      33  ITC_DeInit
       3  ITC_GetCPUCC
       7  ITC_GetSoftIntStatus
     166  ITC_GetSoftwarePriority
     250  ITC_SetSoftwarePriority

 
 473 bytes in section .far_func.text
 
 473 bytes of CODE memory

Errors: none
Warnings: 1
