###############################################################################
#
# IAR C/C++ Compiler V2.10.4.157 for STM8                 15/Nov/2017  10:59:37
# Copyright 2010-2015 IAR Systems AB.
#
#    Source file  =  E:\AirTone\AirToneMLL\USER\stm8l15x_it.c
#    Command line =  
#        E:\AirTone\AirToneMLL\USER\stm8l15x_it.c -e -Oh --debug --code_model
#        medium --data_model medium -o E:\AirTone\AirToneMLL\Debug\Obj\
#        --dlib_config "F:\IAR Systems\Embedded Workbench
#        7.0\stm8\LIB\dlstm8mmn.h" -lcN E:\AirTone\AirToneMLL\Debug\List\ -I
#        E:\AirTone\AirToneMLL\BSP\ -I E:\AirTone\AirToneMLL\USER\ -I
#        E:\AirTone\AirToneMLL\DRIVER\ -I E:\AirTone\AirToneMLL\DRIVER\Memory\
#        -I E:\AirTone\AirToneMLL\DRIVER\AK4637\ -I
#        E:\AirTone\AirToneMLL\DRIVER\CC8530\ -I
#        E:\AirTone\AirToneMLL\DRIVER\Serial\ -I
#        E:\AirTone\AirToneMLL\DRIVER\OLED\ -I
#        E:\AirTone\AirToneMLL\DRIVER\STM8L152C6\inc\ -I
#        E:\AirTone\AirToneMLL|DRIVER\STM8L152C6\src\ --vregs 16
#    List file    =  E:\AirTone\AirToneMLL\Debug\List\stm8l15x_it.lst
#    Object file  =  E:\AirTone\AirToneMLL\Debug\Obj\stm8l15x_it.o
#
###############################################################################

E:\AirTone\AirToneMLL\USER\stm8l15x_it.c
      1          /**
      2            ******************************************************************************
      3            * @file    Project/STM8L15x_StdPeriph_Template/stm8l15x_it.c
      4            * @author  MCD Application Team
      5            * @version V1.6.1
      6            * @date    30-September-2014
      7            * @brief   Main Interrupt Service Routines.
      8            *          This file provides template for all peripherals interrupt service routine.
      9            ******************************************************************************
     10            * @attention
     11            *
     12            * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
     13            *
     14            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     15            * You may not use this file except in compliance with the License.
     16            * You may obtain a copy of the License at:
     17            *
     18            *        http://www.st.com/software_license_agreement_liberty_v2
     19            *
     20            * Unless required by applicable law or agreed to in writing, software
     21            * distributed under the License is distributed on an "AS IS" BASIS,
     22            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     23            * See the License for the specific language governing permissions and
     24            * limitations under the License.
     25            *
     26            ******************************************************************************
     27            */
     28          
     29          /* Includes ------------------------------------------------------------------*/
     30          #include "stm8l15x_it.h"
     31          
     32          /** @addtogroup STM8L15x_StdPeriph_Template
     33            * @{
     34            */
     35          
     36          /* Private typedef -----------------------------------------------------------*/
     37          /* Private define ------------------------------------------------------------*/
     38          /* Private macro -------------------------------------------------------------*/
     39          /* Private variables ---------------------------------------------------------*/
     40          extern uint16_t BV; // Battery voltage
     41          extern volatile uint8_t UI;
     42          
     43          extern uint16_t nAckErr;
     44          extern uint16_t nAck;
     45          
     46          extern uint8_t sw;
     47          
     48          extern int oPointer;
     49          extern int oPointer_slide;
     50          
     51          extern uint16_t dlct;
     52          //extern uint8_t nBytes_I2C; // number of bytes for I2C to write or read
     53          
     54          /* Private function prototypes -----------------------------------------------*/
     55          /* Private functions ---------------------------------------------------------*/
     56          /* Public functions ----------------------------------------------------------*/
     57          
     58          #ifdef _COSMIC_
     59          /**
     60            * @brief Dummy interrupt routine
     61            * @par Parameters:
     62            * None
     63            * @retval
     64            * None
     65          */
     66          INTERRUPT_HANDLER(NonHandledInterrupt,0)
     67          {
     68              /* In order to detect unexpected events during development,
     69                 it is recommended to set a breakpoint on the following instruction.
     70              */
     71          }
     72          #endif
     73          
     74          /**
     75            * @brief TRAP interrupt routine
     76            * @par Parameters:
     77            * None
     78            * @retval
     79            * None
     80          */
     81          INTERRUPT_HANDLER_TRAP(TRAP_IRQHandler)
     82          {
     83              /* In order to detect unexpected events during development,
     84                 it is recommended to set a breakpoint on the following instruction.
     85              */
     86          }
     87          /**
     88            * @brief FLASH Interrupt routine.
     89            * @param  None
     90            * @retval None
     91            */
     92          INTERRUPT_HANDLER(FLASH_IRQHandler,1)
     93          {
     94              /* In order to detect unexpected events during development,
     95                 it is recommended to set a breakpoint on the following instruction.
     96              */
     97          }
     98          /**
     99            * @brief DMA1 channel0 and channel1 Interrupt routine.
    100            * @param  None
    101            * @retval None
    102            */
    103          INTERRUPT_HANDLER(DMA1_CHANNEL0_1_IRQHandler,2)
    104          {
    105              /* In order to detect unexpected events during development,
    106                 it is recommended to set a breakpoint on the following instruction.
    107              */
    108          }
    109          /**
    110            * @brief DMA1 channel2 and channel3 Interrupt routine.
    111            * @param  None
    112            * @retval None
    113            */
    114          INTERRUPT_HANDLER(DMA1_CHANNEL2_3_IRQHandler,3)
    115          {
    116              /* In order to detect unexpected events during development,
    117                 it is recommended to set a breakpoint on the following instruction.
    118              */
    119          }
    120          /**
    121            * @brief RTC / CSS_LSE Interrupt routine.
    122            * @param  None
    123            * @retval None
    124            */
    125          INTERRUPT_HANDLER(RTC_CSSLSE_IRQHandler,4)
    126          {
    127              /* In order to detect unexpected events during development,
    128                 it is recommended to set a breakpoint on the following instruction.
    129              */
    130          }
    131          /**
    132            * @brief External IT PORTE/F and PVD Interrupt routine.
    133            * @param  None
    134            * @retval None
    135            */
    136          INTERRUPT_HANDLER(EXTIE_F_PVD_IRQHandler,5)
    137          {
    138              /* In order to detect unexpected events during development,
    139                 it is recommended to set a breakpoint on the following instruction.
    140              */
    141          }
    142          
    143          /**
    144            * @brief External IT PORTB / PORTG Interrupt routine.
    145            * @param  None
    146            * @retval None
    147            */
    148          INTERRUPT_HANDLER(EXTIB_G_IRQHandler,6)
    149          {
    150              /* In order to detect unexpected events during development,
    151                 it is recommended to set a breakpoint on the following instruction.
    152              */
    153          }
    154          
    155          /**
    156            * @brief External IT PORTD /PORTH Interrupt routine.
    157            * @param  None
    158            * @retval None
    159            */
    160          INTERRUPT_HANDLER(EXTID_H_IRQHandler,7)
    161          {
    162              /* In order to detect unexpected events during development,
    163                 it is recommended to set a breakpoint on the following instruction.
    164              */
    165          }
    166          
    167          /**
    168            * @brief External IT PIN0 Interrupt routine.
    169            * @param  None
    170            * @retval None
    171            */
    172          INTERRUPT_HANDLER(EXTI0_IRQHandler,8)
    173          {
    174              /* In order to detect unexpected events during development,
    175                 it is recommended to set a breakpoint on the following instruction.
    176              */
    177              while(GPIO_ReadInputDataBit(PORT_KEY, KEY_Down) == RESET);
    178          
    179              oPointer_slide ++;
    180              oDisplay_slide();
    181          
    182              EXTI_ClearITPendingBit(EXTI_IT_Pin0);
    183          
    184          }
    185          
    186          /**
    187            * @brief External IT PIN1 Interrupt routine.
    188            * @param  None
    189            * @retval None
    190            */
    191          INTERRUPT_HANDLER(EXTI1_IRQHandler,9)
    192          {
    193              /* In order to detect unexpected events during development,
    194                 it is recommended to set a breakpoint on the following instruction.
    195              */
    196              while(GPIO_ReadInputDataBit(PORT_KEY, KEY_Enter) == RESET);
    197          
    198              
    199              EXTI_ClearITPendingBit(EXTI_IT_Pin1);
    200          }
    201          
    202          /**
    203            * @brief External IT PIN2 Interrupt routine.
    204            * @param  None
    205            * @retval None
    206            */
    207          INTERRUPT_HANDLER(EXTI2_IRQHandler,10)
    208          {
    209              /* In order to detect unexpected events during development,
    210                 it is recommended to set a breakpoint on the following instruction.
    211              */
    212              while(GPIO_ReadInputDataBit(PORT_KEY, KEY_Up) == RESET);
    213          
    214              oPointer_slide --;
    215              oDisplay_slide();
    216              
    217              EXTI_ClearITPendingBit(EXTI_IT_Pin2);
    218          }
    219          
    220          /**
    221            * @brief External IT PIN3 Interrupt routine.
    222            * @param  None
    223            * @retval None
    224            */
    225          INTERRUPT_HANDLER(EXTI3_IRQHandler,11)
    226          {
    227              /* In order to detect unexpected events during development,
    228                 it is recommended to set a breakpoint on the following instruction.
    229              */
    230              while(GPIO_ReadInputDataBit(PORT_KEY, KEY_2) == RESET);
    231              
    232              EXTI_ClearITPendingBit(EXTI_IT_Pin3);
    233          }
    234          
    235          /**
    236            * @brief External IT PIN4 Interrupt routine.
    237            * @param  None
    238            * @retval None
    239            */
    240          INTERRUPT_HANDLER(EXTI4_IRQHandler,12)
    241          {
    242              /* In order to detect unexpected events during development,
    243                 it is recommended to set a breakpoint on the following instruction.
    244              */
    245              while(GPIO_ReadInputDataBit(PORT_KEY, KEY_Back) == RESET);
    246          
    247              sw = !sw;
    248          
    249              EXTI_ClearITPendingBit(EXTI_IT_Pin4);
    250          }
    251          
    252          /**
    253            * @brief External IT PIN5 Interrupt routine.
    254            * @param  None
    255            * @retval None
    256            */
    257          INTERRUPT_HANDLER(EXTI5_IRQHandler,13)
    258          {
    259              /* In order to detect unexpected events during development,
    260                 it is recommended to set a breakpoint on the following instruction.
    261              */
    262              while(GPIO_ReadInputDataBit(PORT_KEY, KEY_1) == RESET);
    263          
    264              UI = !UI;
    265              oPrintf("UI=%d", UI);
    266              if(UI)
    267              {
    268                  
    269              }else
    270              {
    271                  
    272              }
    273              
    274              EXTI_ClearITPendingBit(EXTI_IT_Pin5);
    275          }
    276          
    277          /**
    278            * @brief External IT PIN6 Interrupt routine.
    279            * @param  None
    280            * @retval None
    281            */
    282          INTERRUPT_HANDLER(EXTI6_IRQHandler,14)
    283          {
    284              /* In order to detect unexpected events during development,
    285                 it is recommended to set a breakpoint on the following instruction.
    286              */
    287              
    288              EXTI_ClearITPendingBit(EXTI_IT_Pin6);
    289          }
    290          
    291          /**
    292            * @brief External IT PIN7 Interrupt routine.
    293            * @param  None
    294            * @retval None
    295            */
    296          INTERRUPT_HANDLER(EXTI7_IRQHandler,15)
    297          {
    298              /* In order to detect unexpected events during development,
    299                 it is recommended to set a breakpoint on the following instruction.
    300              */
    301          }
    302          /**
    303            * @brief LCD /AES Interrupt routine.
    304            * @param  None
    305            * @retval None
    306            */
    307          INTERRUPT_HANDLER(LCD_AES_IRQHandler,16)
    308          {
    309              /* In order to detect unexpected events during development,
    310                 it is recommended to set a breakpoint on the following instruction.
    311              */
    312          }
    313          /**
    314            * @brief CLK switch/CSS/TIM1 break Interrupt routine.
    315            * @param  None
    316            * @retval None
    317            */
    318          INTERRUPT_HANDLER(SWITCH_CSS_BREAK_DAC_IRQHandler,17)
    319          {
    320              /* In order to detect unexpected events during development,
    321                 it is recommended to set a breakpoint on the following instruction.
    322              */
    323          }
    324          
    325          /**
    326            * @brief ADC1/Comparator Interrupt routine.
    327            * @param  None
    328            * @retval None
    329            */
    330          INTERRUPT_HANDLER(ADC1_COMP_IRQHandler,18)
    331          {
    332              /* In order to detect unexpected events during development,
    333                 it is recommended to set a breakpoint on the following instruction.
    334              */
    335          }
    336          
    337          /**
    338            * @brief TIM2 Update/Overflow/Trigger/Break /USART2 TX Interrupt routine.
    339            * @param  None
    340            * @retval None
    341            */
    342          INTERRUPT_HANDLER(TIM2_UPD_OVF_TRG_BRK_USART2_TX_IRQHandler,19)
    343          {
    344              /* In order to detect unexpected events during development,
    345                 it is recommended to set a breakpoint on the following instruction.
    346              */
    347          }
    348          
    349          /**
    350            * @brief Timer2 Capture/Compare / USART2 RX Interrupt routine.
    351            * @param  None
    352            * @retval None
    353            */
    354          INTERRUPT_HANDLER(TIM2_CC_USART2_RX_IRQHandler,20)
    355          {
    356              /* In order to detect unexpected events during development,
    357                 it is recommended to set a breakpoint on the following instruction.
    358              */
    359          }
    360          
    361          
    362          /**
    363            * @brief Timer3 Update/Overflow/Trigger/Break Interrupt routine.
    364            * @param  None
    365            * @retval None
    366            */
    367          INTERRUPT_HANDLER(TIM3_UPD_OVF_TRG_BRK_USART3_TX_IRQHandler,21)
    368          {
    369              /* In order to detect unexpected events during development,
    370                 it is recommended to set a breakpoint on the following instruction.
    371              */
    372          }
    373          /**
    374            * @brief Timer3 Capture/Compare /USART3 RX Interrupt routine.
    375            * @param  None
    376            * @retval None
    377            */
    378          INTERRUPT_HANDLER(TIM3_CC_USART3_RX_IRQHandler,22)
    379          {
    380              /* In order to detect unexpected events during development,
    381                 it is recommended to set a breakpoint on the following instruction.
    382              */
    383          }
    384          /**
    385            * @brief TIM1 Update/Overflow/Trigger/Commutation Interrupt routine.
    386            * @param  None
    387            * @retval None
    388            */
    389          INTERRUPT_HANDLER(TIM1_UPD_OVF_TRG_COM_IRQHandler,23)
    390          {
    391              /* In order to detect unexpected events during development,
    392                 it is recommended to set a breakpoint on the following instruction.
    393              */
    394          }
    395          /**
    396            * @brief TIM1 Capture/Compare Interrupt routine.
    397            * @param  None
    398            * @retval None
    399            */
    400          INTERRUPT_HANDLER(TIM1_CC_IRQHandler,24)
    401          {
    402              /* In order to detect unexpected events during development,
    403                 it is recommended to set a breakpoint on the following instruction.
    404              */
    405          }
    406          
    407          /**
    408            * @brief TIM4 Update/Overflow/Trigger Interrupt routine.
    409            * @param  None
    410            * @retval None
    411            */
    412          INTERRUPT_HANDLER(TIM4_UPD_OVF_TRG_IRQHandler,25)
    413          {
    414              /* In order to detect unexpected events during development,
    415                 it is recommended to set a breakpoint on the following instruction.
    416              */
    417              TimingDelay_Decrement();
    418              /* Cleat Interrupt Pending bit */
    419              TIM4_ClearITPendingBit(TIM4_IT_Update);
    420          }
    421          /**
    422            * @brief SPI1 Interrupt routine.
    423            * @param  None
    424            * @retval None
    425            */
    426          INTERRUPT_HANDLER(SPI1_IRQHandler,26)
    427          {
    428              /* In order to detect unexpected events during development,
    429                 it is recommended to set a breakpoint on the following instruction.
    430              */
    431          }
    432          
    433          /**
    434            * @brief USART1 TX / TIM5 Update/Overflow/Trigger/Break Interrupt  routine.
    435            * @param  None
    436            * @retval None
    437            */
    438          INTERRUPT_HANDLER(USART1_TX_TIM5_UPD_OVF_TRG_BRK_IRQHandler,27)
    439          {
    440              /* In order to detect unexpected events during development,
    441                 it is recommended to set a breakpoint on the following instruction.
    442              */
    443          }
    444          
    445          /**
    446            * @brief USART1 RX / Timer5 Capture/Compare Interrupt routine.
    447            * @param  None
    448            * @retval None
    449            */
    450          INTERRUPT_HANDLER(USART1_RX_TIM5_CC_IRQHandler,28)
    451          {
    452              /* In order to detect unexpected events during development,
    453                 it is recommended to set a breakpoint on the following instruction.
    454              */
    455          }
    456          
    457          /**
    458            * @brief I2C1 / SPI2 Interrupt routine.
    459            * @param  None
    460            * @retval None
    461            */
    462          INTERRUPT_HANDLER(I2C1_SPI2_IRQHandler,29)
    463          {
    464              /* In order to detect unexpected events during development,
    465                 it is recommended to set a breakpoint on the following instruction.
    466              */
    467          }
    468          /**
    469            * @}
    470            */
    471          
    472          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Section sizes:

   Bytes  Function/Label
   -----  --------------
      10  ?Subroutine0
       7  ?Subroutine1
       6  ?_0
       1  ADC1_COMP_IRQHandler
       1  DMA1_CHANNEL0_1_IRQHandler
       1  DMA1_CHANNEL2_3_IRQHandler
      46  EXTI0_IRQHandler
      36  EXTI1_IRQHandler
      47  EXTI2_IRQHandler
      36  EXTI3_IRQHandler
      51  EXTI4_IRQHandler
      67  EXTI5_IRQHandler
      28  EXTI6_IRQHandler
       1  EXTI7_IRQHandler
       1  EXTIB_G_IRQHandler
       1  EXTID_H_IRQHandler
       1  EXTIE_F_PVD_IRQHandler
       1  FLASH_IRQHandler
       1  I2C1_SPI2_IRQHandler
       1  LCD_AES_IRQHandler
       1  RTC_CSSLSE_IRQHandler
       1  SPI1_IRQHandler
       1  SWITCH_CSS_BREAK_DAC_IRQHandler
       1  TIM1_CC_IRQHandler
       1  TIM1_UPD_OVF_TRG_COM_IRQHandler
       1  TIM2_CC_USART2_RX_IRQHandler
       1  TIM2_UPD_OVF_TRG_BRK_USART2_TX_IRQHandler
       1  TIM3_CC_USART3_RX_IRQHandler
       1  TIM3_UPD_OVF_TRG_BRK_USART3_TX_IRQHandler
      31  TIM4_UPD_OVF_TRG_IRQHandler
       1  TRAP_IRQHandler
       1  USART1_RX_TIM5_CC_IRQHandler
       1  USART1_TX_TIM5_UPD_OVF_TRG_BRK_IRQHandler

 
 381 bytes in section .far_func.text
   6 bytes in section .near.rodata
 
 381 bytes of CODE  memory
   6 bytes of CONST memory

Errors: none
Warnings: none
