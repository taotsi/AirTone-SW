###############################################################################
#
# IAR C/C++ Compiler V2.10.4.157 for STM8                 16/May/2017  16:55:10
# Copyright 2010-2015 IAR Systems AB.
#
#    Source file  =  
#        H:\ProjectFile\AirTone\AirToneMLL\DRIVER\STM8L152C6\src\stm8l15x_gpio.c
#    Command line =  
#        H:\ProjectFile\AirTone\AirToneMLL\DRIVER\STM8L152C6\src\stm8l15x_gpio.c
#        -e -Oh --debug --code_model medium --data_model medium -o
#        H:\ProjectFile\AirTone\AirToneMLL\Debug\Obj\ --dlib_config
#        "F:\Embedded Workbench 7.0\stm8\LIB\dlstm8mmn.h" -lcN
#        H:\ProjectFile\AirTone\AirToneMLL\Debug\List\ -I
#        H:\ProjectFile\AirTone\AirToneMLL\BSP\ -I
#        H:\ProjectFile\AirTone\AirToneMLL\USER\ -I
#        H:\ProjectFile\AirTone\AirToneMLL\DRIVER\ -I
#        H:\ProjectFile\AirTone\AirToneMLL\DRIVER\Memory\ -I
#        H:\ProjectFile\AirTone\AirToneMLL\DRIVER\AK4637\ -I
#        H:\ProjectFile\AirTone\AirToneMLL\DRIVER\CC8530\ -I
#        H:\ProjectFile\AirTone\AirToneMLL\DRIVER\Serial\ -I
#        H:\ProjectFile\AirTone\AirToneMLL\DRIVER\OLED\ -I
#        H:\ProjectFile\AirTone\AirToneMLL\DRIVER\STM8L152C6\inc\ -I
#        H:\ProjectFile\AirTone\AirToneMLL|DRIVER\STM8L152C6\src\ --vregs 16
#    List file    =  
#        H:\ProjectFile\AirTone\AirToneMLL\Debug\List\stm8l15x_gpio.lst
#    Object file  =  
#        H:\ProjectFile\AirTone\AirToneMLL\Debug\Obj\stm8l15x_gpio.o
#
###############################################################################

H:\ProjectFile\AirTone\AirToneMLL\DRIVER\STM8L152C6\src\stm8l15x_gpio.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm8l15x_gpio.c
      4            * @author  MCD Application Team
      5            * @version V1.6.1
      6            * @date    30-September-2014
      7            * @brief   This file provides firmware functions to manage the following 
      8            *          functionalities of the GPIO peripheral:
      9            *           - Initialization and Configuration
     10            *           - GPIO Read and Write
     11            *
     12            *          ===================================================================
     13            *                                 How to use this driver
     14            *          ===================================================================       
     15            *           1. Configure the GPIO pin(s) using GPIO_Init()
     16            *              Two main configuration are available for each pin:
     17            *                - Input: Floating 
     18            *                         Pull-up.
     19            *                  In Input mode, external interrupt can be enabled or disabled
     20            *                - Output: Push-Pull
     21            *                          Open Drain.
     22            *                  In output mode, the GPIO pin speed is configurable: 
     23            *                  Slow (2 MHz) or Fast (10MHz).
     24            *  
     25            *           2. To get the level of a pin configured in input mode use GPIO_ReadInputDataBit()
     26            * 
     27            *           3. To set/reset GPIO pins sharing the same GPIO port use
     28            *              GPIO_SetBits() / GPIO_ResetBits()
     29            *
     30            *           4. To enable external interrupt, the GPIO pin must be configured
     31            *              in input mode with interrupt enabled. Interrupt sensitivity
     32            *              (rising, falling...) is configurable using 
     33            *              EXTI_SetPinSensitivity() in the EXTI peripheral driver "stm8l15x_exti.c"
     34            *  
     35            ******************************************************************************
     36            * @attention
     37            *
     38            * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
     39            *
     40            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     41            * You may not use this file except in compliance with the License.
     42            * You may obtain a copy of the License at:
     43            *
     44            *        http://www.st.com/software_license_agreement_liberty_v2
     45            *
     46            * Unless required by applicable law or agreed to in writing, software 
     47            * distributed under the License is distributed on an "AS IS" BASIS, 
     48            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     49            * See the License for the specific language governing permissions and
     50            * limitations under the License.
     51            *
     52            ******************************************************************************
     53            */
     54          
     55          /* Includes ------------------------------------------------------------------*/
     56          #include "stm8l15x_gpio.h"
     57          
     58          /** @addtogroup STM8L15x_StdPeriph_Driver
     59            * @{
     60            */
     61          
     62          /** @defgroup CLK 
     63            * @brief CLK driver modules
     64            * @{
     65            */ 
     66            
     67          /* Private typedef -----------------------------------------------------------*/
     68          /* Private define ------------------------------------------------------------*/
     69          /* Private macro -------------------------------------------------------------*/
     70          /* Private variables ---------------------------------------------------------*/
     71          /* Private function prototypes -----------------------------------------------*/
     72          /* Private functions ---------------------------------------------------------*/
     73          
     74          /** @defgroup GPIO_Private_Functions
     75            * @{
     76            */ 
     77          
     78          
     79          /** @defgroup GPIO_Group1 Initialization and Configuration
     80           *  @brief   Initialization and Configuration
     81           *
     82          @verbatim   
     83           ===============================================================================
     84                                  Initialization and Configuration
     85           ===============================================================================  
     86          
     87          @endverbatim
     88            * @{
     89            */
     90          
     91          /**
     92            * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
     93            * @param  GPIOx: Select the GPIO peripheral number (x = A to I).
     94            * @retval None
     95            */
     96          void GPIO_DeInit(GPIO_T* GPIOx)
     97          {
     98            GPIOx->CR2 = GPIO_CR2_RESET_VALUE; /* Reset Control Register 2 */
     99            GPIOx->ODR = GPIO_ODR_RESET_VALUE; /* Reset Output Data Register */
    100            GPIOx->DDR = GPIO_DDR_RESET_VALUE; /* Reset Data Direction Register */
    101            GPIOx->CR1 = GPIO_CR1_RESET_VALUE; /* Reset Control Register 1 */
    102          }
    103          
    104          /**
    105            * @brief  Initializes the GPIOx according to the specified parameters.
    106            * @param  GPIOx : Select the GPIO peripheral number (x = A to I).
    107            * @param  GPIO_Pin : This parameter contains the pin number
    108            *           This parameter can be one of the following values:
    109            *            @arg GPIO_Pin_0: Pin 0
    110            *            @arg GPIO_Pin_1: Pin 1
    111            *            @arg GPIO_Pin_2: Pin 2
    112            *            @arg GPIO_Pin_3: Pin 3
    113            *            @arg GPIO_Pin_4: Pin 4
    114            *            @arg GPIO_Pin_5: Pin 5
    115            *            @arg GPIO_Pin_6: Pin 6
    116            *            @arg GPIO_Pin_7: Pin 7              
    117            * @param  GPIO_Mode : This parameter can be a value of the
    118            *           This parameter can be one of the following values:
    119            *            @arg GPIO_Mode_In_FL_No_IT: Input floating, no external interrupt
    120            *            @arg GPIO_Mode_In_PU_No_IT: Input pull-up, no external interrupt
    121            *            @arg GPIO_Mode_In_FL_IT: Input pull-up, external interrupt
    122            *            @arg GPIO_Mode_Out_OD_Low_Fast: Output open-drain, low level, 10MHz
    123            *            @arg GPIO_Mode_Out_PP_Low_Fast: Output push-pull, low level, 10MHz
    124            *            @arg GPIO_Mode_Out_OD_Low_Slow: Output open-drain, low level, 2MHz
    125            *            @arg GPIO_Mode_Out_PP_Low_Slow: Output push-pull, low level, 2MHz
    126            *            @arg GPIO_Mode_Out_OD_HiZ_Fast: Output open-drain, high-impedance level, 10MHz
    127            *            @arg GPIO_Mode_Out_PP_High_Fast: Output push-pull, high level, 10MHz
    128            *            @arg GPIO_Mode_Out_OD_HiZ_Slow: Output open-drain, high-impedance level, 2MHz
    129            *            @arg GPIO_Mode_Out_PP_High_Slow: Output push-pull, high level, 2MHz
    130            * @retval None
    131            */
    132          
    133          void GPIO_Init(GPIO_T* GPIOx, uint8_t GPIO_Pin, GPIO_Mode_T GPIO_Mode)
    134          {
    135            /*----------------------*/
    136            /* Check the parameters */
    137            /*----------------------*/
    138          
    139            assert_param(IS_GPIO_MODE(GPIO_Mode));
    140            assert_param(IS_GPIO_PIN(GPIO_Pin));
    141          
    142            /* Reset corresponding bit to GPIO_Pin in CR2 register */
    143            GPIOx->CR2 &= (uint8_t)(~(GPIO_Pin));
    144          
    145            /*-----------------------------*/
    146            /* Input/Output mode selection */
    147            /*-----------------------------*/
    148          
    149            if ((((uint8_t)(GPIO_Mode)) & (uint8_t)0x80) != (uint8_t)0x00) /* Output mode */
    150            {
    151              if ((((uint8_t)(GPIO_Mode)) & (uint8_t)0x10) != (uint8_t)0x00) /* High level */
    152              {
    153                GPIOx->ODR |= GPIO_Pin;
    154              } else /* Low level */
    155              {
    156                GPIOx->ODR &= (uint8_t)(~(GPIO_Pin));
    157              }
    158              /* Set Output mode */
    159              GPIOx->DDR |= GPIO_Pin;
    160            } else /* Input mode */
    161            {
    162              /* Set Input mode */
    163              GPIOx->DDR &= (uint8_t)(~(GPIO_Pin));
    164            }
    165          
    166            /*------------------------------------------------------------------------*/
    167            /* Pull-Up/Float (Input) or Push-Pull/Open-Drain (Output) modes selection */
    168            /*------------------------------------------------------------------------*/
    169          
    170            if ((((uint8_t)(GPIO_Mode)) & (uint8_t)0x40) != (uint8_t)0x00) /* Pull-Up or Push-Pull */
    171            {
    172              GPIOx->CR1 |= GPIO_Pin;
    173            } else /* Float or Open-Drain */
    174            {
    175              GPIOx->CR1 &= (uint8_t)(~(GPIO_Pin));
    176            }
    177          
    178            /*-----------------------------------------------------*/
    179            /* Interrupt (Input) or Slope (Output) modes selection */
    180            /*-----------------------------------------------------*/
    181          
    182            if ((((uint8_t)(GPIO_Mode)) & (uint8_t)0x20) != (uint8_t)0x00) /* Interrupt or Slow slope */
    183            {
    184              GPIOx->CR2 |= GPIO_Pin;
    185            } else /* No external interrupt or No slope control */
    186            {
    187              GPIOx->CR2 &= (uint8_t)(~(GPIO_Pin));
    188            }
    189          
    190          }
    191          
    192          /**
    193            * @brief  Configures the external pull-up on GPIOx pins.
    194            * @param  GPIOx : Select the GPIO peripheral number (x = A to I).
    195            * @param  GPIO_Pin : Specifies the pin number
    196            *           This parameter can be one of the following values:
    197            *            @arg GPIO_Pin_0: Pin 0
    198            *            @arg GPIO_Pin_1: Pin 1
    199            *            @arg GPIO_Pin_2: Pin 2
    200            *            @arg GPIO_Pin_3: Pin 3
    201            *            @arg GPIO_Pin_4: Pin 4
    202            *            @arg GPIO_Pin_5: Pin 5
    203            *            @arg GPIO_Pin_6: Pin 6
    204            *            @arg GPIO_Pin_7: Pin 7     
    205            * @param  NewState : The new state of the pull up pin.
    206            *           Can be ENABLE or DISABLE  
    207            * @retval None
    208            */
    209          void GPIO_ExternalPullUpConfig(GPIO_T* GPIOx, uint8_t GPIO_Pin, FunctionalState NewState)
    210          {
    211            /* Check the parameters */
    212            assert_param(IS_GPIO_PIN(GPIO_Pin));
    213            assert_param(IS_FUNCTIONAL_STATE(NewState));
    214          
    215            if (NewState != DISABLE) /* External Pull-Up Set*/
    216            {
    217              GPIOx->CR1 |= GPIO_Pin;
    218            } else /* External Pull-Up Reset*/
    219            {
    220              GPIOx->CR1 &= (uint8_t)(~(GPIO_Pin));
    221            }
    222          }
    223          
    224          /**
    225            * @}
    226            */
    227          
    228          /** @defgroup GPIO_Group2 GPIO Read and Write
    229           *  @brief   GPIO Read and Write
    230           *
    231          @verbatim   
    232           ===============================================================================
    233                                        GPIO Read and Write
    234           ===============================================================================  
    235          
    236          @endverbatim
    237            * @{
    238            */
    239          
    240          /**
    241            * @brief  Writes data to the specified GPIO data port.
    242            * @note   The port must be configured in output mode.
    243            * @param  GPIOx : Select the GPIO peripheral number (x = A to I).
    244            * @param  GPIO_PortVal : Specifies the value to be written to the port output
    245            *         data register.
    246            * @retval None
    247            */
    248          void GPIO_Write(GPIO_T* GPIOx, uint8_t GPIO_PortVal)
    249          {
    250            GPIOx->ODR = GPIO_PortVal;
    251          }
    252          
    253          /**
    254            * @brief  Sets or clears the selected data port bit.
    255            * @param  GPIOx : Select the GPIO peripheral number (x = A to I).
    256            * @param  GPIO_Pin: Specifies the port bit to be written.
    257            *           This parameter can be one of the following values:
    258            *            @arg GPIO_Pin_0: Pin 0
    259            *            @arg GPIO_Pin_1: Pin 1
    260            *            @arg GPIO_Pin_2: Pin 2
    261            *            @arg GPIO_Pin_3: Pin 3
    262            *            @arg GPIO_Pin_4: Pin 4
    263            *            @arg GPIO_Pin_5: Pin 5
    264            *            @arg GPIO_Pin_6: Pin 6
    265            *            @arg GPIO_Pin_7: Pin 7   
    266            * @param  GPIO_BitVal: specifies the desired status to be written.
    267            *         This parameter can be SET or RESET
    268            * @retval None
    269            */
    270          void GPIO_WriteBit(GPIO_T* GPIOx, GPIO_Pin_T GPIO_Pin, BitAction GPIO_BitVal)
    271          {
    272            /* Check the parameters */
    273            assert_param(IS_GPIO_PIN(GPIO_Pin));
    274            assert_param(IS_STATE_VALUE(GPIO_BitVal));
    275          
    276            if (GPIO_BitVal != RESET)
    277            {
    278              GPIOx->ODR |= GPIO_Pin;
    279          
    280            }
    281            else
    282            {
    283              GPIOx->ODR &= (uint8_t)(~GPIO_Pin);
    284            }
    285          }
    286          
    287          /**
    288            * @brief  Writes high level to the specified GPIO pins.
    289            * @note   The port must be configured in output mode.
    290            * @param  GPIOx : Select the GPIO peripheral number (x = A to I).
    291            * @param  GPIO_Pin : Specifies the pins to be turned high.
    292            *           This parameter can be one of the following values:
    293            *            @arg GPIO_Pin_0: Pin 0
    294            *            @arg GPIO_Pin_1: Pin 1
    295            *            @arg GPIO_Pin_2: Pin 2
    296            *            @arg GPIO_Pin_3: Pin 3
    297            *            @arg GPIO_Pin_4: Pin 4
    298            *            @arg GPIO_Pin_5: Pin 5
    299            *            @arg GPIO_Pin_6: Pin 6
    300            *            @arg GPIO_Pin_7: Pin 7   
    301            * @retval None
    302            */
    303          void GPIO_SetBits(GPIO_T* GPIOx, uint8_t GPIO_Pin)
    304          {
    305            GPIOx->ODR |= GPIO_Pin;
    306          }
    307          
    308          /**
    309            * @brief  Writes low level to the specified GPIO pins.
    310            * @note   The port must be configured in output mode.
    311            * @param  GPIOx : Select the GPIO peripheral number (x = A to I).
    312            * @param  GPIO_Pin : Specifies the pins to be turned low
    313            *           This parameter can be one of the following values:
    314            *            @arg GPIO_Pin_0: Pin 0
    315            *            @arg GPIO_Pin_1: Pin 1
    316            *            @arg GPIO_Pin_2: Pin 2
    317            *            @arg GPIO_Pin_3: Pin 3
    318            *            @arg GPIO_Pin_4: Pin 4
    319            *            @arg GPIO_Pin_5: Pin 5
    320            *            @arg GPIO_Pin_6: Pin 6
    321            *            @arg GPIO_Pin_7: Pin 7 
    322            * @retval None
    323            */
    324          void GPIO_ResetBits(GPIO_T* GPIOx, uint8_t GPIO_Pin)
    325          {
    326            GPIOx->ODR &= (uint8_t)(~GPIO_Pin);
    327          }
    328          
    329          /**
    330            * @brief  Toggles the specified GPIO pins.
    331            * @note   The port must be configured in output mode.
    332            * @param  GPIOx : Select the GPIO peripheral number (x = A to I).
    333            * @param  GPIO_Pin : Specifies the pins to be toggled.
    334            * @retval None
    335            */
    336          void GPIO_ToggleBits(GPIO_T* GPIOx, uint8_t GPIO_Pin)
    337          {
    338            GPIOx->ODR ^= GPIO_Pin;
    339          }
    340          
    341          /**
    342            * @brief  Reads the specified GPIO input data port.
    343            * @note   The port must be configured in input mode.
    344            * @param  GPIOx : Select the GPIO peripheral number (x = A to I).
    345            * @retval The GPIOx input data port value.
    346            */
    347          uint8_t GPIO_ReadInputData(GPIO_T* GPIOx)
    348          {
    349            return ((uint8_t)GPIOx->IDR);
    350          }
    351          
    352          /**
    353            * @brief  Reads the specified GPIO output data port.
    354            * @note   The port must be configured in input mode.
    355            * @param  GPIOx : Select the GPIO peripheral number (x = A to I).
    356            * @retval The GPIOx  output data port value.
    357            */
    358          uint8_t GPIO_ReadOutputData(GPIO_T* GPIOx)
    359          {
    360            return ((uint8_t)GPIOx->ODR);
    361          }
    362          
    363          /**
    364            * @brief  Reads the specified GPIO input data pin.
    365            * @param  GPIOx : Select the GPIO peripheral number (x = A to I).
    366            * @param  GPIO_Pin : Specifies the pin number.
    367            *           This parameter can be one of the following values:
    368            *            @arg GPIO_Pin_0: Pin 0
    369            *            @arg GPIO_Pin_1: Pin 1
    370            *            @arg GPIO_Pin_2: Pin 2
    371            *            @arg GPIO_Pin_3: Pin 3
    372            *            @arg GPIO_Pin_4: Pin 4
    373            *            @arg GPIO_Pin_5: Pin 5
    374            *            @arg GPIO_Pin_6: Pin 6
    375            *            @arg GPIO_Pin_7: Pin 7 
    376            * @retval BitStatus : GPIO input pin status.
    377            */
    378          BitStatus GPIO_ReadInputDataBit(GPIO_T* GPIOx, GPIO_Pin_T GPIO_Pin)
    379          {
    380            return ((BitStatus)(GPIOx->IDR & (uint8_t)GPIO_Pin));
    381          }
    382          
    383          /**
    384            * @brief  Reads the specified GPIO Output data pin.
    385            * @param  GPIOx : Select the GPIO peripheral number (x = A to I).
    386            * @param  GPIO_Pin : Specifies the pin number
    387            * @retval BitStatus : GPIO output pin status.
    388            */
    389          BitStatus GPIO_ReadOutputDataBit(GPIO_T* GPIOx, GPIO_Pin_T GPIO_Pin)
    390          {
    391            return ((BitStatus)(GPIOx->ODR & (uint8_t)GPIO_Pin));
    392          }
    393          
    394          /**
    395            * @}
    396            */ 
    397          
    398          /**
    399            * @}
    400            */ 
    401            
    402          /**
    403            * @}
    404            */
    405          
    406          /**
    407            * @}
    408            */
    409          
    410          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Section sizes:

   Bytes  Function/Label
   -----  --------------
      23  GPIO_DeInit
      14  GPIO_ExternalPullUpConfig
     107  GPIO_Init
       3  GPIO_ReadInputData
       3  GPIO_ReadInputDataBit
       2  GPIO_ReadOutputData
       2  GPIO_ReadOutputDataBit
       4  GPIO_ResetBits
       3  GPIO_SetBits
       3  GPIO_ToggleBits
       2  GPIO_Write
      11  GPIO_WriteBit

 
 177 bytes in section .far_func.text
 
 177 bytes of CODE memory

Errors: none
Warnings: none
