###############################################################################
#
# IAR C/C++ Compiler V2.10.4.157 for STM8                 16/May/2017  16:55:30
# Copyright 2010-2015 IAR Systems AB.
#
#    Source file  =  
#        H:\ProjectFile\AirTone\AirToneMLL\DRIVER\STM8L152C6\src\stm8l15x_wfe.c
#    Command line =  
#        H:\ProjectFile\AirTone\AirToneMLL\DRIVER\STM8L152C6\src\stm8l15x_wfe.c
#        -e -Oh --debug --code_model medium --data_model medium -o
#        H:\ProjectFile\AirTone\AirToneMLL\Debug\Obj\ --dlib_config
#        "F:\Embedded Workbench 7.0\stm8\LIB\dlstm8mmn.h" -lcN
#        H:\ProjectFile\AirTone\AirToneMLL\Debug\List\ -I
#        H:\ProjectFile\AirTone\AirToneMLL\BSP\ -I
#        H:\ProjectFile\AirTone\AirToneMLL\USER\ -I
#        H:\ProjectFile\AirTone\AirToneMLL\DRIVER\ -I
#        H:\ProjectFile\AirTone\AirToneMLL\DRIVER\Memory\ -I
#        H:\ProjectFile\AirTone\AirToneMLL\DRIVER\AK4637\ -I
#        H:\ProjectFile\AirTone\AirToneMLL\DRIVER\CC8530\ -I
#        H:\ProjectFile\AirTone\AirToneMLL\DRIVER\Serial\ -I
#        H:\ProjectFile\AirTone\AirToneMLL\DRIVER\OLED\ -I
#        H:\ProjectFile\AirTone\AirToneMLL\DRIVER\STM8L152C6\inc\ -I
#        H:\ProjectFile\AirTone\AirToneMLL|DRIVER\STM8L152C6\src\ --vregs 16
#    List file    =  
#        H:\ProjectFile\AirTone\AirToneMLL\Debug\List\stm8l15x_wfe.lst
#    Object file  =  H:\ProjectFile\AirTone\AirToneMLL\Debug\Obj\stm8l15x_wfe.o
#
###############################################################################

H:\ProjectFile\AirTone\AirToneMLL\DRIVER\STM8L152C6\src\stm8l15x_wfe.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm8l15x_wfe.c
      4            * @author  MCD Application Team
      5            * @version V1.6.1
      6            * @date    30-September-2014
      7            * @brief   This file provides firmware functions to manage the following 
      8            *          functionalities of the Wait for Event (WFE) peripheral:           
      9            *           - WFE Source configuration and management
     10            *             
     11            *  @verbatim
     12            *               
     13            *          ===================================================================
     14            *                               WFE specific features
     15            *          ===================================================================
     16            *
     17            *           Wait for event mode (WFE) stops the CPU but allows the other peripherals
     18            *           and interrupt controller to continue running.
     19            *           This mode is entered from Run mode by executing a WFE instruction.
     20            *           Peripheral events can be generated by the timers, serial interfaces, 
     21            *           DMA controller, comparators and I/O ports. 
     22            *           These are enabled by using the WFE_WakeUpSourceEventCmd() function.
     23            *           
     24            *           When a peripheral event is enabled, the corresponding interrupts are 
     25            *           not served and you have to clear the corresponding flag status.
     26            *           
     27            *           There are two ways to wake up the CPU from WFE mode:
     28            *            - Interrupts: When an interrupt occurs, the CPU wakes up from WFE mode
     29            *              serves the interrupt then goes back to WFE mode.
     30            *            - Wake up event: when a wake up event occurs, the CPU wakes up and 
     31            *              resumes processing, in this case and to save time and power consumption
     32            *              there is no context save/restore activity.            
     33            *                          
     34            *
     35            *  @endverbatim
     36            *                 
     37            ******************************************************************************
     38            * @attention
     39            *
     40            * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
     41            *
     42            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     43            * You may not use this file except in compliance with the License.
     44            * You may obtain a copy of the License at:
     45            *
     46            *        http://www.st.com/software_license_agreement_liberty_v2
     47            *
     48            * Unless required by applicable law or agreed to in writing, software 
     49            * distributed under the License is distributed on an "AS IS" BASIS, 
     50            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     51            * See the License for the specific language governing permissions and
     52            * limitations under the License.
     53            *
     54            ******************************************************************************
     55            */
     56          
     57          /* Includes ------------------------------------------------------------------*/
     58          #include "stm8l15x_wfe.h"
     59          
     60          /** @addtogroup STM8L15x_StdPeriph_Driver
     61            * @{
     62            */
     63            
     64          /** @defgroup WFE 
     65            * @brief WFE driver modules
     66            * @{
     67            */
     68             
     69          /* Private typedef -----------------------------------------------------------*/
     70          /* Private define ------------------------------------------------------------*/
     71          /* Private macro -------------------------------------------------------------*/
     72          /* Private function prototypes -----------------------------------------------*/
     73          /* Private functions ---------------------------------------------------------*/
     74          /** @defgroup WFE_Private_Functions
     75            * @{
     76            */
     77          
     78          /** @defgroup WFE_Group1 WFE Source configuration and management functions 
     79           *  @brief   WFE Source configuration and management functions  
     80           *
     81          @verbatim   
     82           ===============================================================================
     83                         WFE Source configuration and management functions 
     84           ===============================================================================  
     85          
     86          @endverbatim
     87            * @{
     88            */
     89           
     90          /**
     91            * @brief  Deinitializes the WFE registers to their default reset value.
     92            * @param  None
     93            * @retval None
     94            */
     95          void WFE_DeInit(void)
     96          {
     97            WFE->CR1 = WFE_CRX_RESET_VALUE;
     98            WFE->CR2 = WFE_CRX_RESET_VALUE;
     99            WFE->CR3 = WFE_CRX_RESET_VALUE;
    100            WFE->CR4 = WFE_CRX_RESET_VALUE;
    101          }
    102          
    103          /**
    104            * @brief  Set the source that can generate the wake-up event.
    105            * @param  WFE_Source: The wake-up event source .
    106            *          This parameter can be one of the following values:
    107            *            @arg WFE_Source_TIM2_EV0: TIM2 Update/Trigger and Break interrupt  
    108            *            @arg WFE_Source_TIM2_EV1: TIM2 Capture/Compare interrupt 
    109            *            @arg WFE_Source_TIM1_EV0: TIM1 Update/Trigger and Break interrupt
    110            *            @arg WFE_Source_TIM1_EV1: TIM1 Capture/Compare interrupt 
    111            *            @arg WFE_Source_EXTI_EV0: I/O port interrupt from Pins 0
    112            *            @arg WFE_Source_EXTI_EV1: I/O port interrupt from Pins 1
    113            *            @arg WFE_Source_EXTI_EV2: I/O port interrupt from Pins 2
    114            *            @arg WFE_Source_EXTI_EV3: I/O port interrupt from Pins 3
    115            *            @arg WFE_Source_EXTI_EV4: I/O port interrupt from Pins 4
    116            *            @arg WFE_Source_EXTI_EV5: I/O port interrupt from Pins 5
    117            *            @arg WFE_Source_EXTI_EV6: I/O port interrupt from Pins 6
    118            *            @arg WFE_Source_EXTI_EV7: I/O port interrupt from Pins 7
    119            *            @arg WFE_Source_EXTI_EVB_G: I/O port interrupt from port B and G
    120            *            @arg WFE_Source_EXTI_EVD_H: I/O port interrupt from Port D and H
    121            *            @arg WFE_Source_EXTI_EVE_F: I/O port interrupt from Port E and F 
    122            *            @arg WFE_Source_ADC1_COMP_EV: ADC1, COMP1 and COMP2 interrupts
    123            *            @arg WFE_Source_TIM3_EV0: TIM3 Update/Trigger and Break interrupt
    124            *            @arg WFE_Source_TIM3_EV1: TIM3 Capture/Compare interrupt
    125            *            @arg WFE_Source_TIM4_EV: TIM4 Update and Trigger interrupt
    126            *            @arg WFE_Source_SPI1_EV: SPI1 Rx and Tx interrupt
    127            *            @arg WFE_Source_I2C1_EV: I2C1 Rx and Tx interrupt
    128            *            @arg WFE_Source_USART1_EV: USART1 Rx and Tx interrupt
    129            *            @arg WFE_Source_DMA1CH01_EV: DMA1 channel 0 and  1 interrupt
    130            *            @arg WFE_Source_DMA1CH23_EV: DMA1 channel 2 and  3  interrupt 
    131            *            @arg WFE_Source_RTC_CSS_EV: RTC or CSS on LSE event
    132            *            @arg WFE_Source_SPI2_EV: SPI2 Rx and Tx interrupt
    133            *            @arg WFE_Source_USART2_EV: USART2 Rx and Tx interrupt
    134            *            @arg WFE_Source_USART3_EV: USART3 Rx and Tx interrupt
    135            *            @arg WFE_Source_TIM5_EV0: TIM5 Update/Trigger and Break interrupt
    136            *            @arg WFE_Source_TIM5_EV1: TIM5 Capture/Compare interrupt                                                        
    137            * @param  NewState : The wake-up new state.
    138            *          This parameter can be: ENABLE or DISABLE.
    139            * @retval None
    140            */
    141          void WFE_WakeUpSourceEventCmd(WFE_Source_T WFE_Source, FunctionalState NewState)
    142          {
    143            uint8_t register_index = 0;
    144            /* Check function parameters */
    145            assert_param(IS_WFE_SOURCE(WFE_Source));
    146            assert_param(IS_FUNCTIONAL_STATE(NewState));
    147          
    148            /* The mask is reversed in order to  */
    149            register_index = (uint8_t)((uint16_t)WFE_Source >> 0x08);
    150          
    151            if (NewState != DISABLE)
    152            {
    153              switch (register_index)
    154              {
    155                case 1:
    156                  WFE->CR1 |= (uint8_t)WFE_Source;
    157                  break;
    158          
    159                case 2:
    160                  WFE->CR2 |= (uint8_t)WFE_Source;
    161                  break;
    162          
    163                case 3:
    164                  WFE->CR3 |= (uint8_t)WFE_Source;
    165                  break;
    166          
    167                case 4:
    168                  WFE->CR4 |= (uint8_t)WFE_Source;
    169                  break;
    170          
    171                default:
    172                  break;
    173              }
    174            }
    175            else
    176            {
    177              switch (register_index)
    178              {
    179                case 1:
    180                  WFE->CR1 &= (uint8_t)(~(uint8_t)WFE_Source);
    181                  break;
    182          
    183                case 2:
    184                  WFE->CR2 &= (uint8_t)(~ (uint8_t)WFE_Source);
    185                  break;
    186          
    187                case 3:
    188                  WFE->CR3 &= (uint8_t)(~(uint8_t)WFE_Source);
    189                  break;
    190          
    191                case 4:
    192                  WFE->CR4 &= (uint8_t)(~(uint8_t)WFE_Source);
    193                  break;
    194          
    195                default:
    196                  break;
    197              }
    198            }
    199          }
    200          
    201          /**
    202            * @brief  Gets the status of the specified source event.
    203            * @param  WFE_Source: The wake-up event source.
    204            *          This parameter can be one of the following values:
    205            *            @arg WFE_Source_TIM2_EV0: TIM2 Update/Trigger and Break interrupt  
    206            *            @arg WFE_Source_TIM2_EV1: TIM2 Capture/Compare interrupt 
    207            *            @arg WFE_Source_TIM1_EV0: TIM1 Update/Trigger and Break interrupt
    208            *            @arg WFE_Source_TIM1_EV1: TIM1 Capture/Compare interrupt 
    209            *            @arg WFE_Source_EXTI_EV0: I/O port interrupt from Pins 0
    210            *            @arg WFE_Source_EXTI_EV1: I/O port interrupt from Pins 1
    211            *            @arg WFE_Source_EXTI_EV2: I/O port interrupt from Pins 2
    212            *            @arg WFE_Source_EXTI_EV3: I/O port interrupt from Pins 3
    213            *            @arg WFE_Source_EXTI_EV4: I/O port interrupt from Pins 4
    214            *            @arg WFE_Source_EXTI_EV5: I/O port interrupt from Pins 5
    215            *            @arg WFE_Source_EXTI_EV6: I/O port interrupt from Pins 6
    216            *            @arg WFE_Source_EXTI_EV7: I/O port interrupt from Pins 7
    217            *            @arg WFE_Source_EXTI_EVB_G: I/O port interrupt from port B and G
    218            *            @arg WFE_Source_EXTI_EVD_H: I/O port interrupt from Port D and H
    219            *            @arg WFE_Source_EXTI_EVE_F: I/O port interrupt from Port E and F 
    220            *            @arg WFE_Source_ADC1_COMP_EV: ADC1, COMP1 and COMP2 interrupts
    221            *            @arg WFE_Source_TIM3_EV0: TIM3 Update/Trigger and Break interrupt
    222            *            @arg WFE_Source_TIM3_EV1: TIM3 Capture/Compare interrupt
    223            *            @arg WFE_Source_TIM4_EV: TIM4 Update and Trigger interrupt
    224            *            @arg WFE_Source_SPI1_EV: SPI1 Rx and Tx interrupt
    225            *            @arg WFE_Source_I2C1_EV: I2C1 Rx and Tx interrupt
    226            *            @arg WFE_Source_USART1_EV: USART1 Rx and Tx interrupt
    227            *            @arg WFE_Source_DMA1CH01_EV: DMA1 channel 0 and  1 interrupt
    228            *            @arg WFE_Source_DMA1CH23_EV: DMA1 channel 2 and  3  interrupt 
    229            *            @arg WFE_Source_RTC_CSS_EV: RTC or CSS on LSE event
    230            *            @arg WFE_Source_SPI2_EV: SPI2 Rx and Tx interrupt
    231            *            @arg WFE_Source_USART2_EV: USART2 Rx and Tx interrupt
    232            *            @arg WFE_Source_USART3_EV: USART3 Rx and Tx interrupt
    233            *            @arg WFE_Source_TIM5_EV0: TIM5 Update/Trigger and Break interrupt
    234            *            @arg WFE_Source_TIM5_EV1: TIM5 Capture/Compare interrupt  
    235            * @retval Source Event state, ENABLE or DISABLE
    236            */
    237          FunctionalState WFE_GetWakeUpSourceEventStatus(WFE_Source_T WFE_Source)
    238          {
    239            FunctionalState status = DISABLE;
    240            /* Check function parameters */
    241            assert_param(IS_WFE_SOURCE(WFE_Source));
    242          
    243            switch (WFE_Source)
    244            {
    245              case WFE_Source_TIM2_EV0:
    246              case WFE_Source_TIM2_EV1:
    247              case WFE_Source_TIM1_EV0:
    248              case WFE_Source_TIM1_EV1:
    249              case WFE_Source_EXTI_EV0:
    250              case WFE_Source_EXTI_EV1:
    251              case WFE_Source_EXTI_EV2:
    252              case WFE_Source_EXTI_EV3:
    253          
    254                if ((WFE->CR1 & (uint8_t)WFE_Source) != (uint8_t)0x00)
    255                {
    256                  /* The wake-up event source is enabled*/
    257                  status = ENABLE;
    258                }
    259                else
    260                {
    261                  /* The wake-up event source is disabled*/
    262                  status = DISABLE;
    263                }
    264                break;
    265          
    266              case WFE_Source_EXTI_EV4:
    267              case WFE_Source_EXTI_EV5:
    268              case WFE_Source_EXTI_EV6:
    269              case WFE_Source_EXTI_EV7:
    270              case WFE_Source_EXTI_EVB_G:
    271              case WFE_Source_EXTI_EVD_H:
    272              case WFE_Source_EXTI_EVE_F:
    273              case WFE_Source_ADC1_COMP_EV:
    274          
    275                if ((WFE->CR2 & (uint8_t)WFE_Source) != (uint8_t)0x00)
    276                {
    277                  /* The wake-up event source is enabled*/
    278                  status = ENABLE;
    279                }
    280                else
    281                {
    282                  /* The wake-up event source is disabled*/
    283                  status = DISABLE;
    284                }
    285                break;
    286              case WFE_Source_TIM3_EV0:
    287              case WFE_Source_TIM3_EV1:
    288              case WFE_Source_TIM4_EV:
    289              case WFE_Source_SPI1_EV:
    290              case WFE_Source_I2C1_EV:
    291              case WFE_Source_USART1_EV:
    292              case WFE_Source_DMA1CH01_EV:
    293              case WFE_Source_DMA1CH23_EV:
    294          
    295                if ((WFE->CR3 & (uint8_t)WFE_Source) != (uint8_t)0x00)
    296                {
    297                  /* The wake-up event source is enabled*/
    298                  status = ENABLE;
    299                }
    300                else
    301                {
    302                  /* The wake-up event source is disabled*/
    303                  status = DISABLE;
    304                }
    305                break;
    306          
    307              case WFE_Source_TIM5_EV0:
    308              case WFE_Source_TIM5_EV1:
    309              case WFE_Source_AES_EV:
    310              case WFE_Source_SPI2_EV:
    311              case WFE_Source_USART2_EV:
    312              case WFE_Source_USART3_EV:
    313              case WFE_Source_RTC_CSS_EV:
    314          
    315                if ((WFE->CR4 & (uint8_t)WFE_Source) != (uint8_t)0x00)
    316                {
    317                  /* The wake-up event source is enabled*/
    318                  status = ENABLE;
    319                }
    320                else
    321                {
    322                  /* The wake-up event source is disabled*/
    323                  status = DISABLE;
    324                }
    325                break;
    326              default:
    327                break;
    328            }
    329            return status;
    330          }
    331          
    332          /**
    333            * @}
    334            */
    335          
    336          /**
    337            * @}
    338            */
    339            
    340          /**
    341            * @}
    342            */
    343          
    344          /**
    345            * @}
    346            */
    347          
    348          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Section sizes:

   Bytes  Function/Label
   -----  --------------
     128  ??switch_table_0
      17  WFE_DeInit
      52  WFE_GetWakeUpSourceEventStatus
     105  WFE_WakeUpSourceEventCmd

 
 174 bytes in section .far_func.text
 128 bytes in section .near_func.text
 
 302 bytes of CODE memory

Errors: none
Warnings: none
