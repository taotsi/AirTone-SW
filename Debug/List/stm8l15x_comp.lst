###############################################################################
#
# IAR C/C++ Compiler V2.10.4.157 for STM8                 16/May/2017  16:55:06
# Copyright 2010-2015 IAR Systems AB.
#
#    Source file  =  
#        H:\ProjectFile\AirTone\AirToneMLL\DRIVER\STM8L152C6\src\stm8l15x_comp.c
#    Command line =  
#        H:\ProjectFile\AirTone\AirToneMLL\DRIVER\STM8L152C6\src\stm8l15x_comp.c
#        -e -Oh --debug --code_model medium --data_model medium -o
#        H:\ProjectFile\AirTone\AirToneMLL\Debug\Obj\ --dlib_config
#        "F:\Embedded Workbench 7.0\stm8\LIB\dlstm8mmn.h" -lcN
#        H:\ProjectFile\AirTone\AirToneMLL\Debug\List\ -I
#        H:\ProjectFile\AirTone\AirToneMLL\BSP\ -I
#        H:\ProjectFile\AirTone\AirToneMLL\USER\ -I
#        H:\ProjectFile\AirTone\AirToneMLL\DRIVER\ -I
#        H:\ProjectFile\AirTone\AirToneMLL\DRIVER\Memory\ -I
#        H:\ProjectFile\AirTone\AirToneMLL\DRIVER\AK4637\ -I
#        H:\ProjectFile\AirTone\AirToneMLL\DRIVER\CC8530\ -I
#        H:\ProjectFile\AirTone\AirToneMLL\DRIVER\Serial\ -I
#        H:\ProjectFile\AirTone\AirToneMLL\DRIVER\OLED\ -I
#        H:\ProjectFile\AirTone\AirToneMLL\DRIVER\STM8L152C6\inc\ -I
#        H:\ProjectFile\AirTone\AirToneMLL|DRIVER\STM8L152C6\src\ --vregs 16
#    List file    =  
#        H:\ProjectFile\AirTone\AirToneMLL\Debug\List\stm8l15x_comp.lst
#    Object file  =  
#        H:\ProjectFile\AirTone\AirToneMLL\Debug\Obj\stm8l15x_comp.o
#
###############################################################################

H:\ProjectFile\AirTone\AirToneMLL\DRIVER\STM8L152C6\src\stm8l15x_comp.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm8l15x_comp.c
      4            * @author  MCD Application Team
      5            * @version V1.6.1
      6            * @date    30-September-2014
      7            * @brief   This file provides firmware functions to manage the following 
      8            *          functionalities of the comparators (COMP1 and COMP2) peripheral: 
      9            *           - Comparators configuration
     10            *           - Window mode control
     11            *           - Internal Reference Voltage (VREFINT) output
     12            *           - Comparator channels trigger configuration
     13            *           - Interrupts and flags management  
     14            *           
     15            *  @verbatim
     16            *
     17            *          ===================================================================
     18            *                                 How to use this driver
     19            *          ===================================================================
     20            *          1- Enable comparators clock using CLK_PeripheralClockConfig(CLK_Peripheral_COMP, ENABLE);
     21            *            
     22            *          When using COMP1:
     23            *          2- Connect internal reference voltage to COMP1 inverting input
     24            *             using COMP_VrefintToCOMP1Connect()
     25            *          3- Close the analog switch number 14 using SYSCFG_RIAnalogSwitchConfig()
     26            *          4- Close the analog switch that corresponds to the pin to be used as 
     27            *             non inverting input using SYSCFG_RIAnalogSwitchConfig()
     28            *          5- Close the I/O switch of the pin to be used as non inverting input
     29            *             using SYSCFG_RIIOSwitchConfig()
     30            *          6- Configure the event detection using COMP_EdgeConfig()    
     31            *
     32            *          When using COMP2:
     33            *          2- Select the COMP2 inverting input, configure the speed and COMP2
     34            *             output redirection using COMP_Init()
     35            *             If the inverting input is an external pin, close the I/O channel
     36            *             switch using SYSCFG_RIIOSwitchConfig()
     37            *          3- Close I/O Switch that corresponds to the selected pin as
     38            *             comparator 2 non inverting input using SYSCFG_RIIOSwitchConfig()    
     39            *          4- Configure the event detection using COMP_EdgeConfig()   
     40            *
     41            * @note
     42            *          1- COMP1 comparator and ADC can't be used at the same time since
     43            *             they share the same ADC switch matrix (analog switches).
     44            *
     45            *          2- When an I/O is used as comparator input, the corresponding GPIO 
     46            *             registers should be configured in input floating.
     47            *
     48            *          3- Comparators outputs (CMP1OUT and CMP2OUT) are not mapped on
     49            *             GPIO pin. They are only internal.
     50            *             To get the comparator output level, use COMP_GetOutputLevel() function    
     51            *  @endverbatim      
     52            ******************************************************************************
     53            * @attention
     54            *
     55            * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
     56            *
     57            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     58            * You may not use this file except in compliance with the License.
     59            * You may obtain a copy of the License at:
     60            *
     61            *        http://www.st.com/software_license_agreement_liberty_v2
     62            *
     63            * Unless required by applicable law or agreed to in writing, software 
     64            * distributed under the License is distributed on an "AS IS" BASIS, 
     65            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     66            * See the License for the specific language governing permissions and
     67            * limitations under the License.
     68            *
     69            ******************************************************************************
     70            */
     71          
     72          /* Includes ------------------------------------------------------------------*/
     73          #include "stm8l15x_comp.h"
     74          
     75          /** @addtogroup STM8L15x_StdPeriph_Driver
     76            * @{
     77            */
     78            
     79          /** @defgroup COMP 
     80            * @brief COMP driver modules
     81            * @{
     82            */ 
     83          /* Private typedef -----------------------------------------------------------*/
     84          /* Private define ------------------------------------------------------------*/
     85          /* Private macro -------------------------------------------------------------*/
     86          /* Private variables ---------------------------------------------------------*/
     87          /* Private function prototypes -----------------------------------------------*/
     88          /* Private functions ---------------------------------------------------------*/
     89          
     90          /** @defgroup COMP_Private_Functions
     91            * @{
     92            */
     93          
     94          /** @defgroup COMP_Group1 Initialization and Configuration functions
     95           *  @brief   Initialization and Configuration functions 
     96           *
     97          @verbatim   
     98           ===============================================================================
     99                                  Initialization and Configuration functions
    100           ===============================================================================  
    101          
    102          @endverbatim
    103            * @{
    104            */
    105          
    106          /**
    107            * @brief  Deinitializes the COMPx peripheral registers to their default reset values.
    108            * @param  None.
    109            * @retval None.
    110            */
    111          void COMP_DeInit(void)
    112          {
    113            /* Set COMP->CSR1 to reset value 0x00 */
    114            COMP->CSR1 = (uint8_t) COMP_CSR1_RESET_VALUE;
    115          
    116            /* Set COMP->CSR2 to reset value 0x00 */
    117            COMP->CSR2 = (uint8_t) COMP_CSR2_RESET_VALUE;
    118          
    119            /* Set COMP->CSR3 to reset value 0xC0 */
    120            COMP->CSR3 = (uint8_t) COMP_CSR3_RESET_VALUE;
    121          
    122            /* Set COMP->CSR4 to reset value 0x00 */
    123            COMP->CSR4 = (uint8_t) COMP_CSR4_RESET_VALUE;
    124          
    125            /* Set COMP->CSR5 to reset value 0x00 */
    126            COMP->CSR5 = (uint8_t) COMP_CSR5_RESET_VALUE;
    127          }
    128          
    129          /**
    130            * @brief  Initializes the comparator inverting input, output and speed.
    131            * @note   This function configures only COMP2.
    132            * @param  COMP_InvertingInput : selects the comparator inverting input.
    133            *          This parameter can be one of the following values:
    134            *            @arg COMP_InvertingInput_IO: Input/Output on comparator inverting input enable
    135            *            @arg COMP_InvertingInput_VREFINT: VREFINT on comparator inverting input enable
    136            *            @arg COMP_InvertingInput_3_4VREFINT: 3/4 VREFINT on comparator inverting input enable
    137            *            @arg COMP_InvertingInput_1_2VREFINT: 1/2 VREFINT on comparator inverting input enable
    138            *            @arg COMP_InvertingInput_1_4VREFINT: 1/4 VREFINT on comparator inverting input enable
    139            *            @arg COMP_InvertingInput_DAC1: DAC1 output on comparator inverting input enable
    140            *            @arg COMP_InvertingInput_DAC2: DAC2 output on comparator inverting input enable
    141            * @param  COMP_OutputSelect : selects the comparator output
    142            *          This parameter can be one of the following values:
    143            *            @arg COMP_OutputSelect_TIM2IC2: COMP2 output connected to TIM2 Input Capture 2
    144            *            @arg COMP_OutputSelect_TIM3IC2: COMP2 output connected to TIM3 Input Capture 2
    145            *            @arg COMP_OutputSelect_TIM1BRK: COMP2 output connected to TIM1 Break Input
    146            *            @arg COMP_OutputSelect_TIM1OCREFCLR: COMP2 output connected to TIM1 OCREF Clear
    147            * @param  COMP_Speed selects the comparator speed
    148            *          This parameter can be one of the following values:
    149            *            @arg COMP_Speed_Slow: Comparator speed: slow
    150            *            @arg COMP_Speed_Fast: Comparator speed: fast
    151            * @retval None.
    152            */
    153          void COMP_Init(COMP_InvertingInput_T COMP_InvertingInput,
    154                         COMP_OutputSelect_T COMP_OutputSelect, COMP_Speed_T COMP_Speed)
    155          {
    156            /* Check the parameters */
    157            assert_param(IS_COMP_INVERTING_INPUT(COMP_InvertingInput));
    158            assert_param(IS_COMP_OUTPUT(COMP_OutputSelect));
    159            assert_param(IS_COMP_SPEED(COMP_Speed));
    160          
    161            /* Reset the INSEL[2:0] bits in CSR3 register */
    162            COMP->CSR3 &= (uint8_t) (~COMP_CSR3_INSEL);
    163            /* Select the comparator inverting input */
    164            COMP->CSR3 |= (uint8_t) COMP_InvertingInput;
    165          
    166            /* Reset the OUTSEL[1:0] bits in CSR3 register */
    167            COMP->CSR3 &= (uint8_t) (~COMP_CSR3_OUTSEL);
    168            /* Redirect the comparator output */
    169            COMP->CSR3 |= (uint8_t) COMP_OutputSelect;
    170          
    171            /* Reset the comparator speed bit */
    172            COMP->CSR2 &= (uint8_t) (~COMP_CSR2_SPEED);
    173            /* Select the comparator speed */
    174            COMP->CSR2 |= (uint8_t) COMP_Speed;
    175          }
    176          
    177          /**
    178            * @brief  Enables or disables connection between VREFINT and COMP1 inverting input.
    179            * @param  NewState new state of the VREFINT connection to COMP1 inverting input.
    180            *         This parameter can be ENABLE or DISABLE.
    181            * @retval None
    182            */
    183          void COMP_VrefintToCOMP1Connect(FunctionalState NewState)
    184          {
    185            /* Check the parameters */
    186            assert_param(IS_FUNCTIONAL_STATE(NewState));
    187          
    188            if (NewState != DISABLE)
    189            {
    190              /* Enable the comparator */
    191              COMP->CSR3 |= COMP_CSR3_VREFEN;
    192            }
    193            else
    194            {
    195              /* Disable the comparator */
    196              COMP->CSR3 &= (uint8_t)(~COMP_CSR3_VREFEN);
    197            }
    198          }
    199          
    200          /**
    201            * @brief  Configures the COMP edge detection.
    202            * @param  COMP_Selection: selects the comparator.
    203            *          This parameter can be one of the following values:
    204            *            @arg COMP_Selection_COMP1: Selection of Comparator 1
    205            *            @arg COMP_Selection_COMP2: Selection of Comparator 2
    206            * @param  COMP_Edge: This parameter can be one of the following values:
    207            *            @arg COMP_Edge_Falling: Falling edge selection
    208            *            @arg COMP_Edge_Rising: Rising edge selection  
    209            *            @arg COMP_Edge_Rising_Falling: Rising and Falling edge selection
    210            * @retval None.
    211            */
    212          void COMP_EdgeConfig(COMP_Selection_T COMP_Selection, COMP_Edge_T COMP_Edge)
    213          {
    214            /* Check the parameters */
    215            assert_param(IS_COMP_ALL_PERIPH(COMP_Selection));
    216            assert_param(IS_COMP_EDGE(COMP_Edge));
    217          
    218            /* Check if comparator 1 is selected */
    219            if (COMP_Selection == COMP_Selection_COMP1)
    220            {
    221              /* Reset the comparator 1 edge control bits */
    222              COMP->CSR1 &= (uint8_t) (~COMP_CSR1_CMP1);
    223          
    224              /* Select the edge detection of comparator 1 output */
    225              COMP->CSR1 |= (uint8_t) COMP_Edge;
    226            }
    227            /* The comparator 2 is selected */
    228            else
    229            {
    230              /* Reset the comparator 2 edge control bits */
    231              COMP->CSR2 &= (uint8_t) (~COMP_CSR2_CMP2);
    232          
    233              /* Select the edge detection of comparator 2 output */
    234              COMP->CSR2 |= (uint8_t) COMP_Edge;
    235            }
    236          }
    237          
    238          /**
    239            * @brief  Returns the output level of the comparator.
    240            * @note   Comparators outputs aren't available on GPIO (outputs levels are 
    241            *         only internal).
    242            * @param  COMP_Selection: selects the comparator.
    243            *          This parameter can be one of the following values:
    244            *            @arg COMP_Selection_COMP1: Selection of Comparator 1
    245            *            @arg COMP_Selection_COMP2: Selection of Comparator 2
    246            * @retval Returns the comparator output level
    247            *          This value can be one of the following:
    248            *            - COMP_OutputLevel_Low: Comparator output level is low
    249            *            - COMP_OutputLevel_High: Comparator output level is high
    250            */
    251          COMP_OutputLevel_T COMP_GetOutputLevel(COMP_Selection_T COMP_Selection)
    252          {
    253            uint8_t compout;
    254          
    255            /* Check the parameters */
    256            assert_param(IS_COMP_ALL_PERIPH(COMP_Selection));
    257          
    258            /* Check if Comparator 1 is selected */
    259            if (COMP_Selection == COMP_Selection_COMP1)
    260            {
    261              /* Check if comparator 1 output level is high */
    262              if ((COMP->CSR1 & COMP_CSR1_CMP1OUT) != (uint8_t) RESET)
    263              {
    264                /* Get Comparator 1 output level */
    265                compout = (COMP_OutputLevel_T) COMP_OutputLevel_High;
    266              }
    267              /* comparator 1 output level is low */
    268              else
    269              {
    270                /* Get Comparator 1 output level */
    271                compout = (COMP_OutputLevel_T) COMP_OutputLevel_Low;
    272              }
    273            }
    274            /* Comparator 2 is selected */
    275            else
    276            {
    277              /* Check if comparator 2 output level is high */
    278              if ((COMP->CSR2 & COMP_CSR2_CMP2OUT) != (uint8_t) RESET)
    279              {
    280                /* Get Comparator output level */
    281                compout = (COMP_OutputLevel_T) COMP_OutputLevel_High;
    282              }
    283              /* comparator 2 output level is low */
    284              else
    285              {
    286                /* Get Comparator 2 output level */
    287                compout = (COMP_OutputLevel_T) COMP_OutputLevel_Low;
    288              }
    289            }
    290          
    291            /* Return the comparator output level */
    292            return (COMP_OutputLevel_T)(compout);
    293          }
    294          
    295          /**
    296            * @}
    297            */
    298          
    299          /** @defgroup COMP_Group2 Window mode control function
    300           *  @brief   Window mode control function 
    301           *
    302          @verbatim   
    303           ===============================================================================
    304                                        Window mode control function
    305           ===============================================================================  
    306          
    307            In window mode:
    308                - COMP1 inverting input is fixed to VREFINT defining the first
    309                  threshold
    310                - COMP2 inverting input is configurable (DAC_OUT1, VREFINT sub-multiples, ...)
    311                  defining the second threshold
    312                - COMP1 and COMP2 non inverting inputs are connected together.
    313                   
    314          @endverbatim
    315            * @{
    316            */
    317          
    318          /**
    319            * @brief  Enables or disables the window mode.
    320            * @param  NewState new state of the window mode.
    321            *         This parameter can be ENABLE or DISABLE.
    322            * @retval None
    323            */
    324          void COMP_WindowCmd(FunctionalState NewState)
    325          {
    326            /* Check the parameters */
    327            assert_param(IS_FUNCTIONAL_STATE(NewState));
    328          
    329            if (NewState != DISABLE)
    330            {
    331              /* Enable the window mode */
    332              COMP->CSR3 |= (uint8_t) COMP_CSR3_WNDWE;
    333            }
    334            else
    335            {
    336              /* Disable the window mode */
    337              COMP->CSR3 &= (uint8_t)(~COMP_CSR3_WNDWE);
    338            }
    339          }
    340          /**
    341            * @}
    342            */
    343            
    344          /** @defgroup COMP_Group3 Internal Reference Voltage output function
    345           *  @brief   Internal Reference Voltage (VREFINT) output function 
    346           *
    347          @verbatim   
    348           ===============================================================================
    349                       Internal Reference Voltage (VREFINT) output function
    350           ===============================================================================  
    351          
    352          @endverbatim
    353            * @{
    354            */
    355          
    356          /**
    357            * @brief  Enables or disables the output of the internal reference voltage.
    358            * @param  NewState : new state of the Vrefint output.
    359              *         This parameter can be: ENABLE or DISABLE.
    360            * @retval None
    361            */
    362          void COMP_VrefintOutputCmd(FunctionalState NewState)
    363          {
    364            /* Check the parameters */
    365            assert_param(IS_FUNCTIONAL_STATE(NewState));
    366          
    367            if (NewState != DISABLE)
    368            {
    369              /* Enable the output of internal reference voltage */
    370              COMP->CSR3 |= (uint8_t) COMP_CSR3_VREFOUTEN;
    371            }
    372            else
    373            {
    374              /* Disable the output of internal reference voltage */
    375              COMP->CSR3 &= (uint8_t) (~COMP_CSR3_VREFOUTEN);
    376            }
    377          }
    378          
    379          /**
    380            * @}
    381            */
    382          
    383          /** @defgroup COMP_Group4 Comparator channels trigger configuration
    384           *  @brief  Comparator channels trigger configuration
    385           *
    386          @verbatim   
    387           ===============================================================================
    388                          Comparator channels trigger configuration
    389           ===============================================================================  
    390          
    391          @endverbatim
    392            * @{
    393            */
    394          
    395          /**
    396            * @brief  Enables or disables the schmitt trigger.
    397            * @param  NewState : new state of the schmitt trigger.
    398              *         This parameter can be: ENABLE or DISABLE.
    399            * @retval None
    400            */
    401          void COMP_SchmittTriggerCmd(FunctionalState NewState)
    402          {
    403            /* Check the parameters */
    404            assert_param(IS_FUNCTIONAL_STATE(NewState));
    405          
    406            if (NewState != DISABLE)
    407            {
    408              /* Enable Schmitt trigger on Input Output switches Channels */
    409              COMP->CSR1 |= (uint8_t) COMP_CSR1_STE;
    410            }
    411            else
    412            {
    413              /* Enable Schmitt trigger on Input Output switches Channels */
    414              COMP->CSR1 &= (uint8_t) (~COMP_CSR1_STE);
    415            }
    416          }
    417          
    418          /**
    419            * @brief  Enables or disables trigger on the specified input/output group.
    420            * @param  COMP_TriggerGroup : specifies the input/output group
    421            *          This parameter can be one of the following values:
    422            *            @arg COMP_TriggerGroup_InvertingInput: Trigger on comparator 2 inverting input
    423            *            @arg COMP_TriggerGroup_NonInvertingInput: Trigger on comparator 2 non inverting input
    424            *            @arg COMP_TriggerGroup_VREFINTOutput: Trigger on VREFINT output
    425            *            @arg COMP_TriggerGroup_DACOutput: Trigger on DAC output      
    426            * @param  COMP_TriggerPin : specifies the pin(s) within the input/output group
    427            *          This parameter can be one of the following values:
    428            *            @arg COMP_TriggerPin_0: Trigger Pin 0
    429            *            @arg COMP_TriggerPin_0: Trigger Pin 1
    430            *            @arg COMP_TriggerPin_0: Trigger Pin 2    
    431            * @param  NewState : enable or disable the trigger on the selected pin(s)
    432              *         This parameter can be: ENABLE or DISABLE.
    433            * @retval None
    434            */
    435          void COMP_TriggerConfig(COMP_TriggerGroup_T COMP_TriggerGroup,
    436                                  COMP_TriggerPin_T COMP_TriggerPin,
    437                                  FunctionalState NewState)
    438          {
    439            /* Check the parameters */
    440            assert_param(IS_COMP_TRIGGERGROUP(COMP_TriggerGroup));
    441            assert_param(IS_COMP_TRIGGERPIN(COMP_TriggerPin));
    442          
    443            switch (COMP_TriggerGroup)
    444            {
    445              case COMP_TriggerGroup_InvertingInput:
    446          
    447                if (NewState != DISABLE)
    448                {
    449                  COMP->CSR4 &= (uint8_t) ~COMP_TriggerPin;
    450                }
    451                else
    452                {
    453                  COMP->CSR4 |= (uint8_t) COMP_TriggerPin;
    454                }
    455                break;
    456          
    457              case COMP_TriggerGroup_NonInvertingInput:
    458                if (NewState != DISABLE)
    459                {
    460                  COMP->CSR4 &= (uint8_t) ~((uint8_t)(COMP_TriggerPin << 3));
    461                }
    462                else
    463                {
    464                  COMP->CSR4 |= (uint8_t) (COMP_TriggerPin << 3);
    465                }
    466                break;
    467          
    468              case COMP_TriggerGroup_VREFINTOutput:
    469                if (NewState != DISABLE)
    470                {
    471                  COMP->CSR5 &= (uint8_t) ~COMP_TriggerPin;
    472                }
    473                else
    474                {
    475                  COMP->CSR5 |= (uint8_t) COMP_TriggerPin;
    476                }
    477                break;
    478          
    479              case COMP_TriggerGroup_DACOutput:
    480                if (NewState != DISABLE)
    481                {
    482                  COMP->CSR5 &= (uint8_t) ~((uint8_t)(COMP_TriggerPin << 3));
    483                }
    484                else
    485                {
    486                  COMP->CSR5 |= (uint8_t) (COMP_TriggerPin << 3);
    487                }
    488                break;
    489          
    490              default:
    491                break;
    492            }
    493          }
    494          
    495          /**
    496            * @}
    497            */
    498            
    499          /** @defgroup COMP_Group5 Interrupts and flags management functions
    500           *  @brief   Interrupts and flags management functions 
    501           *
    502          @verbatim   
    503           ===============================================================================
    504                             Interrupts and flags management functions
    505           ===============================================================================
    506          
    507          @endverbatim
    508            * @{
    509            */
    510          
    511          /**
    512            * @brief  Enables or disables the interrupt generation when an event is detected.
    513            * @param  COMP_Selection : selects the comparator
    514            *          This parameter can be one of the following values:
    515            *            @arg COMP_Selection_COMP1: Selection of Comparator 1
    516            *            @arg COMP_Selection_COMP2: Selection of Comparator 2
    517            * @param  NewState : new state of the COMPx interrupt.
    518              *         This parameter can be: ENABLE or DISABLE.
    519            * @retval None
    520            */
    521          void COMP_ITConfig(COMP_Selection_T COMP_Selection, FunctionalState NewState)
    522          {
    523            /* Check the parameters */
    524            assert_param(IS_COMP_ALL_PERIPH(COMP_Selection));
    525            assert_param(IS_FUNCTIONAL_STATE(NewState));
    526          
    527            /* Check if Comparator 1 is selected */
    528            if (COMP_Selection == COMP_Selection_COMP1)
    529            {
    530              if (NewState != DISABLE)
    531              {
    532                /* Enable the COMP1 Interrupt source */
    533                COMP->CSR1 |= (uint8_t) COMP_CSR1_IE1;
    534              }
    535              else
    536              {
    537                /* Disable the COMP1 Interrupt source */
    538                COMP->CSR1 &= (uint8_t)(~COMP_CSR1_IE1);
    539              }
    540            }
    541            else /* Comparator 2 is selected */
    542            {
    543              if (NewState != DISABLE)
    544              {
    545                /* Enable the COMP2 Interrupt source */
    546                COMP->CSR2 |= (uint8_t) COMP_CSR2_IE2;
    547              }
    548              else
    549              {
    550                /* Disable the COMP2 Interrupt source */
    551                COMP->CSR2 &= (uint8_t)(~COMP_CSR2_IE2);
    552              }
    553            }
    554          }
    555          
    556          /**
    557            * @brief  Checks whether the comparator flag is set or not.
    558            * @param  COMP_Selection : selects the comparator
    559            *          This parameter can be one of the following values:
    560            *            @arg COMP_Selection_COMP1: Selection of Comparator 1
    561            *            @arg COMP_Selection_COMP2: Selection of Comparator 2
    562            * @retval The new state of COMPx event flag (SET or RESET).
    563            */
    564          FlagStatus COMP_GetFlagStatus(COMP_Selection_T COMP_Selection)
    565          {
    566            FlagStatus bitstatus = RESET;
    567          
    568            /* Check the parameters */
    569            assert_param(IS_COMP_ALL_PERIPH(COMP_Selection));
    570          
    571            /* Check if COMP1 is selected */
    572            if (COMP_Selection == COMP_Selection_COMP1)
    573            {
    574              if ((COMP->CSR1 & COMP_CSR1_EF1) != (uint8_t) RESET)
    575              {
    576                /* The comparator 1 event flag is set */
    577                bitstatus = SET;
    578              }
    579              else
    580              {
    581                /* The comparator 1 event flag is reset */
    582                bitstatus = RESET;
    583              }
    584            }
    585            else   /* COMP2 is selected */
    586            {
    587              if ((COMP->CSR2 & COMP_CSR2_EF2) != (uint8_t) RESET)
    588              {
    589                /* The comparator 2 event flag is set */
    590                bitstatus = SET;
    591              }
    592              else
    593              {
    594                /* The comparator 2 event flag is reset */
    595                bitstatus = RESET;
    596              }
    597            }
    598          
    599            /* return the comparator event flag status */
    600            return (FlagStatus)(bitstatus);
    601          }
    602          
    603          /**
    604            * @brief  Clears the comparator�s pending flag.
    605            * @param  COMP_Selection : selects the comparator
    606            *          This parameter can be one of the following values:
    607            *            @arg COMP_Selection_COMP1: Selection of Comparator 1
    608            *            @arg COMP_Selection_COMP2: Selection of Comparator 2
    609            * @retval None.
    610            */
    611          void COMP_ClearFlag(COMP_Selection_T COMP_Selection)
    612          {
    613            /* Check the parameters */
    614            assert_param(IS_COMP_ALL_PERIPH(COMP_Selection));
    615          
    616            if (COMP_Selection == COMP_Selection_COMP1)
    617            {
    618              /* Clear the flag EF1 (rc_w0) clear this bit by writing 0. */
    619              COMP->CSR1 &= (uint8_t) (~COMP_CSR1_EF1);
    620            }
    621            else
    622            {
    623              /* Clear the flag EF2 (rc_w0) clear this bit by writing 0. */
    624              COMP->CSR2 &= (uint8_t) (~COMP_CSR2_EF2);
    625            }
    626          }
    627          
    628          /**
    629            * @brief  Checks whether the comparator interrupt has occurred or not.
    630            * @param  COMP_Selection : selects the comparator
    631            *          This parameter can be one of the following values:
    632            *            @arg COMP_Selection_COMP1: Selection of Comparator 1
    633            *            @arg COMP_Selection_COMP2: Selection of Comparator 2
    634            * @retval ITStatus : The state of the COMPx event flag (SET or RESET).
    635            */
    636          ITStatus COMP_GetITStatus(COMP_Selection_T COMP_Selection)
    637          {
    638            ITStatus bitstatus = RESET;
    639            uint8_t itstatus = 0x00, itenable = 0x00;
    640          
    641            /* Check the parameters */
    642            assert_param(IS_COMP_ALL_PERIPH(COMP_Selection));
    643          
    644            if (COMP_Selection == COMP_Selection_COMP1)
    645            {
    646              /* Get the EF1 comparator event flag status */
    647              itstatus = (uint8_t) (COMP->CSR1 & COMP_CSR1_EF1);
    648          
    649              /* Get the IE1 interrupt enable bit status */
    650              itenable = (uint8_t) (COMP->CSR1 & COMP_CSR1_IE1);
    651          
    652              if ((itstatus != (uint8_t) RESET) && (itenable != (uint8_t) RESET))
    653              {
    654                /* the EF1 and IE1 are set */
    655                bitstatus = SET;
    656              }
    657              else
    658              {
    659                /* the EF1 or IE1 is reset */
    660                bitstatus = RESET;
    661              }
    662            }
    663            else
    664            {
    665              /* Get the EF2 comparator event flag value */
    666              itstatus = (uint8_t) (COMP->CSR2 & COMP_CSR2_EF2);
    667          
    668              /* Get the IE2 interrupt enable bit value */
    669              itenable = (uint8_t) (COMP->CSR2 & COMP_CSR2_IE2);
    670          
    671              if ((itstatus != (uint8_t)RESET) && (itenable != (uint8_t)RESET))
    672              {
    673                /* The EF2 and IE2 are set */
    674                bitstatus = SET;
    675              }
    676              else
    677              {
    678                /* The EF2 or IE2 is reset */
    679                bitstatus = RESET;
    680              }
    681            }
    682          
    683            /* Return the COMP interrupt status */
    684            return (ITStatus) bitstatus;
    685          }
    686          
    687          /**
    688            * @brief  Clears the interrupt pending bits of the comparator.
    689            * @param  COMP_Selection : selects the comparator
    690            *          This parameter can be one of the following values:
    691            *            @arg COMP_Selection_COMP1: Selection of Comparator 1
    692            *            @arg COMP_Selection_COMP2: Selection of Comparator 2
    693            * @retval None
    694            */
    695          void COMP_ClearITPendingBit(COMP_Selection_T COMP_Selection)
    696          {
    697            /* Check the parameters */
    698            assert_param(IS_COMP_ALL_PERIPH(COMP_Selection));
    699          
    700            if (COMP_Selection == COMP_Selection_COMP1)
    701            {
    702              /* Clear the flag EF1 (rc_w0) clear this bit by writing 0. */
    703              COMP->CSR1 &= (uint8_t) (~COMP_CSR1_EF1);
    704            }
    705            else
    706            {
    707              /* Clear the flag EF2 (rc_w0) clear this bit by writing 0. */
    708              COMP->CSR2 &= (uint8_t) (~COMP_CSR2_EF2);
    709            }
    710          }
    711          
    712          /**
    713            * @}
    714            */ 
    715          
    716          /**
    717            * @}
    718            */
    719          
    720          /**
    721            * @}
    722            */ 
    723          
    724          /**
    725            * @}
    726            */ 
    727          
    728          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Section sizes:

   Bytes  Function/Label
   -----  --------------
      14  COMP_ClearFlag
      14  COMP_ClearITPendingBit
      21  COMP_DeInit
      38  COMP_EdgeConfig
      28  COMP_GetFlagStatus
      58  COMP_GetITStatus
      28  COMP_GetOutputLevel
      32  COMP_ITConfig
      47  COMP_Init
      13  COMP_SchmittTriggerCmd
      85  COMP_TriggerConfig
      13  COMP_VrefintOutputCmd
      13  COMP_VrefintToCOMP1Connect
      13  COMP_WindowCmd

 
 417 bytes in section .far_func.text
 
 417 bytes of CODE memory

Errors: none
Warnings: none
